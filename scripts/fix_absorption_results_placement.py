"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ absorption tabs.
–î–æ–±–∞–≤–ª—è–µ—Ç QLabel —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å" –∏ —É–¥–∞–ª—è–µ—Ç –Ω–∏–∂–Ω–∏–π result_text.
"""
import re
import os

def fix_forest_restoration_tab():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç forest_restoration_tab.py"""
    file_path = "ui/forest_restoration_tab.py"

    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()

    # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫ result_text –∏ –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ (—Å—Ç—Ä–æ–∫–∏ 191-198)
    content = re.sub(
        r'\n\s+# --- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ---\n\s+self\.result_text = QTextEdit\(\).*?\n\s+layout\.addWidget\(self\.result_text\)\n\s+\n\s+# –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\s+clear_results_btn = QPushButton\("üóë –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"\)\n\s+clear_results_btn\.clicked\.connect\(lambda: self\.result_text\.clear\(\)\)\n\s+layout\.addWidget\(clear_results_btn\)\n',
        '\n',
        content
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—á–µ—Ç–∞

    # –§.1
    content = re.sub(
        r'(calc_f1_btn = QPushButton\("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å ŒîC –æ–±—â–µ–µ \(–§\. 1\)"\); calc_f1_btn\.clicked\.connect\(self\._calculate_f1\)\n\s+carbon_layout\.addRow\(calc_f1_btn\))',
        r'\1\n        self.f1_result = QLabel("‚Äî"); self.f1_result.setStyleSheet("color: green; font-weight: bold; padding: 5px;"); self.f1_result.setWordWrap(True)\n        carbon_layout.addRow("–†–µ–∑—É–ª—å—Ç–∞—Ç:", self.f1_result)',
        content
    )

    # –§.2
    content = re.sub(
        r'(calc_f2_btn = QPushButton\("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å ŒîC –±–∏–æ–º–∞—Å—Å—ã \(–§\. 2\)"\); calc_f2_btn\.clicked\.connect\(self\._calculate_f2\)\n\s+layout_f2\.addRow\(calc_f2_btn\))',
        r'\1\n        self.f2_result = QLabel("‚Äî"); self.f2_result.setStyleSheet("color: green; font-weight: bold; padding: 5px;"); self.f2_result.setWordWrap(True)\n        layout_f2.addRow("–†–µ–∑—É–ª—å—Ç–∞—Ç:", self.f2_result)',
        content
    )

    # –§.3
    content = re.sub(
        r'(calc_f3_btn = QPushButton\("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å C –¥—Ä–µ–≤–æ—Å—Ç–æ—è \(–§\. 3\)"\); calc_f3_btn\.clicked\.connect\(self\._calculate_f3\)\n\s+layout_f3\.addRow\(calc_f3_btn\))',
        r'\1\n        self.f3_result = QLabel("‚Äî"); self.f3_result.setStyleSheet("color: green; font-weight: bold; padding: 5px;"); self.f3_result.setWordWrap(True)\n        layout_f3.addRow("–†–µ–∑—É–ª—å—Ç–∞—Ç:", self.f3_result)',
        content
    )

    # –§.4
    content = re.sub(
        r'(calc_f4_btn = QPushButton\("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å C –ø–æ–¥—Ä–æ—Å—Ç–∞ \(–§\. 4\)"\); calc_f4_btn\.clicked\.connect\(self\._calculate_f4\)\n\s+layout_f4\.addRow\(calc_f4_btn\))',
        r'\1\n        self.f4_result = QLabel("‚Äî"); self.f4_result.setStyleSheet("color: green; font-weight: bold; padding: 5px;"); self.f4_result.setWordWrap(True)\n        layout_f4.addRow("–†–µ–∑—É–ª—å—Ç–∞—Ç:", self.f4_result)',
        content
    )

    # –§.5
    content = re.sub(
        r'(calc_f5_btn = QPushButton\("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å C –ø–æ—á–≤—ã \(–§\. 5\)"\); calc_f5_btn\.clicked\.connect\(self\._calculate_f5\)\n\s+layout_f5\.addRow\(calc_f5_btn\))',
        r'\1\n        self.f5_result = QLabel("‚Äî"); self.f5_result.setStyleSheet("color: green; font-weight: bold; padding: 5px;"); self.f5_result.setWordWrap(True)\n        layout_f5.addRow("–†–µ–∑—É–ª—å—Ç–∞—Ç:", self.f5_result)',
        content
    )

    # –§.6
    content = re.sub(
        r'(calc_f6_btn = QPushButton\("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—ã–±—Ä–æ—Å—ã –æ—Ç –ø–æ–∂–∞—Ä–∞ \(–§\. 6\)"\); calc_f6_btn\.clicked\.connect\(self\._calculate_f6\)\n\s+layout_f6\.addRow\(calc_f6_btn\))',
        r'\1\n        self.f6_result = QLabel("‚Äî"); self.f6_result.setStyleSheet("color: green; font-weight: bold; padding: 5px;"); self.f6_result.setWordWrap(True)\n        layout_f6.addRow("–†–µ–∑—É–ª—å—Ç–∞—Ç:", self.f6_result)',
        content
    )

    # –§.7
    content = re.sub(
        r'(calc_f7_btn = QPushButton\("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å CO2 \(–§\. 7\)"\); calc_f7_btn\.clicked\.connect\(self\._calculate_f7\)\n\s+drain_layout\.addRow\(calc_f7_btn\))',
        r'\1\n        self.f7_result = QLabel("‚Äî"); self.f7_result.setStyleSheet("color: green; font-weight: bold; padding: 5px;"); self.f7_result.setWordWrap(True)\n        drain_layout.addRow("–†–µ–∑—É–ª—å—Ç–∞—Ç:", self.f7_result)',
        content
    )

    # –§.8
    content = re.sub(
        r'(calc_f8_btn = QPushButton\("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å N2O \(–§\. 8\)"\); calc_f8_btn\.clicked\.connect\(self\._calculate_f8\)\n\s+drain_layout\.addRow\(calc_f8_btn\))',
        r'\1\n        self.f8_result = QLabel("‚Äî"); self.f8_result.setStyleSheet("color: green; font-weight: bold; padding: 5px;"); self.f8_result.setWordWrap(True)\n        drain_layout.addRow("–†–µ–∑—É–ª—å—Ç–∞—Ç:", self.f8_result)',
        content
    )

    # –§.9
    content = re.sub(
        r'(calc_f9_btn = QPushButton\("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å CH4 \(–§\. 9\)"\); calc_f9_btn\.clicked\.connect\(self\._calculate_f9\)\n\s+drain_layout\.addRow\(calc_f9_btn\))',
        r'\1\n        self.f9_result = QLabel("‚Äî"); self.f9_result.setStyleSheet("color: green; font-weight: bold; padding: 5px;"); self.f9_result.setWordWrap(True)\n        drain_layout.addRow("–†–µ–∑—É–ª—å—Ç–∞—Ç:", self.f9_result)',
        content
    )

    # –§.10
    content = re.sub(
        r'(calc_f10_btn = QPushButton\("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å C_FUEL \(–§\. 10\)"\)\n\s+calc_f10_btn\.clicked\.connect\(self\._calculate_f10\)\n\s+fuel_btn_layout\.addWidget\(add_fuel_btn\)\n\s+fuel_btn_layout\.addWidget\(remove_fuel_btn\)\n\s+fuel_btn_layout\.addWidget\(calc_f10_btn\)\n\s+fuel_layout\.addLayout\(fuel_btn_layout\))',
        r'\1\n        self.f10_result = QLabel("‚Äî"); self.f10_result.setStyleSheet("color: green; font-weight: bold; padding: 5px;"); self.f10_result.setWordWrap(True)\n        fuel_layout.addWidget(QLabel("–†–µ–∑—É–ª—å—Ç–∞—Ç:")); fuel_layout.addWidget(self.f10_result)',
        content
    )

    # –§.11
    content = re.sub(
        r'(calc_f11_btn = QPushButton\("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ ŒîC –≤ CO2 \(–§\. 11\)"\); calc_f11_btn\.clicked\.connect\(self\._calculate_f11\))',
        r'\1\n        self.f11_result = QLabel("‚Äî"); self.f11_result.setStyleSheet("color: green; font-weight: bold; padding: 5px;"); self.f11_result.setWordWrap(True)\n        convert_layout.addRow(calc_f11_btn)\n        convert_layout.addRow("–†–µ–∑—É–ª—å—Ç–∞—Ç –§.11:", self.f11_result)',
        content
    )
    # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    content = re.sub(
        r'(self\.f11_result\.setWordWrap\(True\)\n\s+convert_layout\.addRow\(calc_f11_btn\)\n\s+convert_layout\.addRow\("–†–µ–∑—É–ª—å—Ç–∞—Ç –§\.11:", self\.f11_result\))\n\s+calc_f12_btn',
        r'\1\n        calc_f12_btn',
        content
    )

    # –§.12
    content = re.sub(
        r'(calc_f12_btn = QPushButton\("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ CO2-—ç–∫–≤ \(–§\. 12\)"\); calc_f12_btn\.clicked\.connect\(self\._calculate_f12\))',
        r'\1\n        self.f12_result = QLabel("‚Äî"); self.f12_result.setStyleSheet("color: green; font-weight: bold; padding: 5px;"); self.f12_result.setWordWrap(True)\n        convert_layout.addRow(calc_f12_btn)\n        convert_layout.addRow("–†–µ–∑—É–ª—å—Ç–∞—Ç –§.12:", self.f12_result)',
        content
    )
    # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    content = re.sub(
        r'(self\.f12_result\.setWordWrap\(True\)\n\s+convert_layout\.addRow\(calc_f12_btn\)\n\s+convert_layout\.addRow\("–†–µ–∑—É–ª—å—Ç–∞—Ç –§\.12:", self\.f12_result\))\n\s+convert_layout\.addRow\(calc_f11_btn\)\n\s+convert_layout\.addRow\(calc_f12_btn\)',
        r'\1',
        content
    )

    # –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã —Ä–∞—Å—á–µ—Ç–∞, –∑–∞–º–µ–Ω—è—è _append_result –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ç–µ–∫—Å—Ç–∞ –≤ label
    # –ß–∏—Ç–∞–µ–º –º–µ—Ç–æ–¥—ã
    with open(file_path, 'r', encoding='utf-8') as f:
        lines = f.readlines()

    # –ù–∞–π–¥–µ–º –≥–¥–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –º–µ—Ç–æ–¥—ã —Ä–∞—Å—á–µ—Ç–∞
    method_start = None
    for i, line in enumerate(lines):
        if 'def _calculate_f1(self):' in line:
            method_start = i
            break

    # –ó–∞–º–µ–Ω–∏–º –≤–µ—Å—å —Ä–∞–∑–¥–µ–ª –º–µ—Ç–æ–¥–æ–≤
    if method_start:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–æ –º–µ—Ç–æ–¥–æ–≤
        before_methods = ''.join(lines[:method_start])

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content[:content.find('def _calculate_f1(self):')])
            f.write('''    def _calculate_f1(self):
        try:
            biomass = get_float(self.f1_biomass, "ŒîC –±–∏–æ–º–∞—Å—Å–∞")
            deadwood = get_float(self.f1_deadwood, "ŒîC –º–µ—Ä—Ç–≤–∞—è –¥—Ä–µ–≤–µ—Å–∏–Ω–∞")
            litter = get_float(self.f1_litter, "ŒîC –ø–æ–¥—Å—Ç–∏–ª–∫–∞")
            soil = get_float(self.f1_soil, "ŒîC –ø–æ—á–≤–∞")
            delta_c = self.calculator.calculate_carbon_stock_change(biomass, deadwood, litter, soil)
            co2_eq = delta_c * (-44/12)
            self.f1_result.setText(f"ŒîC –æ–±—â–µ–µ: {delta_c:.4f} —Ç C/–≥–æ–¥\\nCO2-—ç–∫–≤: {co2_eq:.4f} —Ç CO2-—ç–∫–≤/–≥–æ–¥ ({'–ü–æ–≥–ª–æ—â–µ–Ω–∏–µ' if co2_eq < 0 else '–í—ã–±—Ä–æ—Å'})")
            logging.info(f"ForestRestorationTab: F1 calculated: {delta_c:.4f} t C/year")
        except Exception as e:
            handle_error(self, e, "ForestRestorationTab", "–§. 1")

    def _calculate_f2(self):
        try:
            c_after = get_float(self.f2_c_after, "C –ø–æ—Å–ª–µ")
            c_before = get_float(self.f2_c_before, "C –¥–æ")
            area = get_float(self.f2_area, "–ü–ª–æ—â–∞–¥—å")
            period = get_float(self.f2_period, "–ü–µ—Ä–∏–æ–¥")
            delta_c = self.calculator.calculate_biomass_change(c_after, c_before, area, period)
            self.f2_result.setText(f"ŒîC –±–∏–æ–º–∞—Å—Å—ã: {delta_c:.4f} —Ç C/–≥–æ–¥")
            logging.info(f"ForestRestorationTab: F2 calculated: {delta_c:.4f} t C/year")
        except Exception as e:
            handle_error(self, e, "ForestRestorationTab", "–§. 2")

    def _calculate_f3(self):
        try:
            species = self.f3_species.currentText().lower()
            diameter = get_float(self.f3_diameter, "–î–∏–∞–º–µ—Ç—Ä")
            height = get_float(self.f3_height, "–í—ã—Å–æ—Ç–∞")
            count = self.f3_count.value()
            carbon = self.calculator.calculate_tree_biomass(species, diameter, height)
            total_carbon = carbon * count
            self.f3_result.setText(f"C –¥—Ä–µ–≤–æ—Å—Ç–æ—è: {carbon:.4f} —Ç C (–Ω–∞ –¥–µ—Ä–µ–≤–æ)\\n–í—Å–µ–≥–æ ({count} —à—Ç): {total_carbon:.4f} —Ç C")
            logging.info(f"ForestRestorationTab: F3 calculated: {carbon:.4f} t C/tree")
        except Exception as e:
            handle_error(self, e, "ForestRestorationTab", "–§. 3")

    def _calculate_f4(self):
        try:
            heights_text = self.f4_heights.text().strip()
            if not heights_text:
                raise ValueError("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
            heights = [float(h.strip().replace(',', '.')) for h in heights_text.split(',')]
            species = self.f4_species.currentText().lower()
            carbon = self.calculator.calculate_undergrowth_biomass(species, heights)
            avg_height = sum(heights) / len(heights)
            self.f4_result.setText(f"C –ø–æ–¥—Ä–æ—Å—Ç–∞: {carbon:.4f} —Ç C\\n(N={len(heights)}, —Å—Ä–µ–¥–Ω. –≤—ã—Å–æ—Ç–∞={avg_height:.2f} –º)")
            logging.info(f"ForestRestorationTab: F4 calculated: {carbon:.4f} t C")
        except Exception as e:
            handle_error(self, e, "ForestRestorationTab", "–§. 4")

    def _calculate_f5(self):
        try:
            org_percent = get_float(self.f5_org_percent, "–û—Ä–≥. –≤–µ—â–µ—Å—Ç–≤–æ")
            depth_cm = get_float(self.f5_depth_cm, "–ì–ª—É–±–∏–Ω–∞")
            bulk_density = get_float(self.f5_bulk_density, "–û–±—ä–µ–º–Ω–∞—è –º–∞—Å—Å–∞")
            carbon = self.calculator.calculate_soil_carbon(org_percent, depth_cm, bulk_density)
            self.f5_result.setText(f"C –ø–æ—á–≤—ã: {carbon:.4f} —Ç C/–≥–∞")
            logging.info(f"ForestRestorationTab: F5 calculated: {carbon:.4f} t C/ha")
        except Exception as e:
            handle_error(self, e, "ForestRestorationTab", "–§. 5")

    def _calculate_f6(self):
        try:
            area = get_float(self.f6_area, "–ü–ª–æ—â–∞–¥—å")
            fuel_mass = get_float(self.f6_fuel_mass, "–ú–∞—Å—Å–∞ —Ç–æ–ø–ª–∏–≤–∞")
            comb_factor = get_float(self.f6_comb_factor, "–ö–æ—ç—Ñ. —Å–≥–æ—Ä–∞–Ω–∏—è")
            gas_type = self.f6_gas_type.currentText()
            emission = self.calculator.calculate_fire_emissions(area, fuel_mass, comb_factor, gas_type)
            gwp_factors = {"CO2": 1, "CH4": 28, "N2O": 265}
            co2_eq = emission * gwp_factors.get(gas_type, 1)
            self.f6_result.setText(f"–í—ã–±—Ä–æ—Å—ã {gas_type}: {emission:.4f} —Ç\\nCO2-—ç–∫–≤: {co2_eq:.4f} —Ç")
            logging.info(f"ForestRestorationTab: F6 calculated: {emission:.4f} t {gas_type}")
        except Exception as e:
            handle_error(self, e, "ForestRestorationTab", "–§. 6")

    def _calculate_f7(self):
        try:
            area = get_float(self.drain_area, "–ü–ª–æ—â–∞–¥—å")
            ef = get_float(self.f7_ef, "–ö–æ—ç—Ñ. –≤—ã–±—Ä–æ—Å–∞")
            co2_emission = self.calculator.calculate_drained_soil_co2(area, ef)
            self.f7_result.setText(f"CO2 –æ—Ç –æ—Å—É—à–µ–Ω–∏—è: {co2_emission:.4f} —Ç CO2/–≥–æ–¥")
            logging.info(f"ForestRestorationTab: F7 calculated: {co2_emission:.4f} t CO2/year")
        except Exception as e:
            handle_error(self, e, "ForestRestorationTab", "–§. 7")

    def _calculate_f8(self):
        try:
            area = get_float(self.drain_area, "–ü–ª–æ—â–∞–¥—å")
            ef = get_float(self.f8_ef, "–ö–æ—ç—Ñ. –≤—ã–±—Ä–æ—Å–∞ N2O")
            n2o_emission = self.calculator.calculate_drained_soil_n2o(area, ef)
            co2_eq = n2o_emission * 265
            self.f8_result.setText(f"N2O –æ—Ç –æ—Å—É—à–µ–Ω–∏—è: {n2o_emission:.6f} —Ç N2O/–≥–æ–¥\\nCO2-—ç–∫–≤: {co2_eq:.4f} —Ç")
            logging.info(f"ForestRestorationTab: F8 calculated: {n2o_emission:.6f} t N2O/year")
        except Exception as e:
            handle_error(self, e, "ForestRestorationTab", "–§. 8")

    def _calculate_f9(self):
        try:
            area = get_float(self.drain_area, "–ü–ª–æ—â–∞–¥—å")
            frac_ditch = get_float(self.f9_frac_ditch, "–î–æ–ª—è –∫–∞–Ω–∞–≤")
            ef_land = get_float(self.f9_ef_land, "EF_land CH4")
            ef_ditch = get_float(self.f9_ef_ditch, "EF_ditch CH4")
            ch4_emission_kg = self.calculator.calculate_drained_soil_ch4(area, frac_ditch, ef_land, ef_ditch)
            ch4_emission_t = ch4_emission_kg / 1000.0
            co2_eq = ch4_emission_t * 28
            self.f9_result.setText(f"CH4 –æ—Ç –æ—Å—É—à–µ–Ω–∏—è: {ch4_emission_t:.6f} —Ç CH4/–≥–æ–¥ ({ch4_emission_kg:.3f} –∫–≥/–≥–æ–¥)\\nCO2-—ç–∫–≤: {co2_eq:.4f} —Ç")
            logging.info(f"ForestRestorationTab: F9 calculated: {ch4_emission_t:.6f} t CH4/year")
        except Exception as e:
            handle_error(self, e, "ForestRestorationTab", "–§. 9")

    def _calculate_f10(self):
        try:
            fuel_data = []
            for row in range(self.f10_table.rowCount()):
                fuel_name_item = self.f10_table.item(row, 0)
                volume_item = self.f10_table.item(row, 1)
                ef_item = self.f10_table.item(row, 2)

                if fuel_name_item and volume_item and ef_item:
                    fuel_name = fuel_name_item.text().strip()
                    if fuel_name:
                        volume = float(volume_item.text().replace(',', '.'))
                        ef = float(ef_item.text().replace(',', '.'))
                        fuel_data.append((volume, ef))

            if not fuel_data:
                raise ValueError("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∏–¥ —Ç–æ–ø–ª–∏–≤–∞ —Å –¥–∞–Ω–Ω—ã–º–∏")

            c_fuel = self.calculator.calculate_fossil_fuel_emissions(fuel_data)
            result_text = f"C_FUEL: {c_fuel:.4f} —Ç C\\n\\n–†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ç–æ–ø–ª–∏–≤—É:\\n"
            for i, (volume, ef) in enumerate(fuel_data, 1):
                contrib = volume * ef
                result_text += f"  –¢–æ–ø–ª–∏–≤–æ {i}: {contrib:.4f} —Ç C\\n"

            self.f10_result.setText(result_text)
            logging.info(f"ForestRestorationTab: F10 calculated: {c_fuel:.4f} t C")
        except Exception as e:
            handle_error(self, e, "ForestRestorationTab", "–§. 10")

    def _calculate_f11(self):
        try:
            carbon = get_float(self.f11_carbon, "ŒîC")
            co2_eq = self.calculator.carbon_to_co2_conversion(carbon)
            self.f11_result.setText(f"CO2: {co2_eq:.4f} —Ç CO2")
            logging.info(f"ForestRestorationTab: F11 calculated: {co2_eq:.4f} t CO2")
        except Exception as e:
            handle_error(self, e, "ForestRestorationTab", "–§. 11")

    def _calculate_f12(self):
        try:
            gas_amount = get_float(self.f12_gas_amount, "–ö–æ–ª-–≤–æ –≥–∞–∑–∞")
            gas_type = self.f12_gas_type.currentText()
            co2_eq = self.calculator.ghg_to_co2_equivalent(gas_amount, gas_type)
            self.f12_result.setText(f"CO2-—ç–∫–≤: {co2_eq:.4f} —Ç CO2-—ç–∫–≤")
            logging.info(f"ForestRestorationTab: F12 calculated: {co2_eq:.4f} t CO2eq")
        except Exception as e:
            handle_error(self, e, "ForestRestorationTab", "–§. 12")

    def get_summary_data(self) -> Dict[str, float]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
        data = {
            'absorption_c': 0.0,
            'emission_co2': 0.0,
            'emission_ch4': 0.0,
            'emission_n2o': 0.0,
            'details': ''
        }
        details = "–õ–µ—Å–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ:\\n"

        try:
            if hasattr(self, 'f2_c_after') and self.f2_c_after.text() and self.f2_c_before.text():
                c_after = float(self.f2_c_after.text().replace(',', '.'))
                c_before = float(self.f2_c_before.text().replace(',', '.'))
                area = float(self.f2_area.text().replace(',', '.')) if self.f2_area.text() else 0
                period = float(self.f2_period.text().replace(',', '.')) if self.f2_period.text() else 1
                delta_c = (c_after - c_before) * area / period
                if delta_c < 0:
                    data['absorption_c'] += abs(delta_c)
                details += f"  - –ò–∑–º–µ–Ω–µ–Ω–∏–µ C –≤ –±–∏–æ–º–∞—Å—Å–µ: {delta_c:.2f} —Ç C/–≥–æ–¥\\n"
        except:
            details += "  - –î–∞–Ω–Ω—ã–µ –§. 2 –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã\\n"

        data['details'] = details
        return data
''')

    print("‚úÖ forest_restoration_tab.py –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")

if __name__ == "__main__":
    print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ absorption tabs...")
    fix_forest_restoration_tab()
    print("\\n–ì–æ—Ç–æ–≤–æ!")
