# calculations/category_1.py - Модуль для расчетов по Категории 1.
# Инкапсулирует всю бизнес-логику, связанную со стационарным сжиганием топлива.
# Комментарии на русском. Поддержка UTF-8.

# Импортируем DataService для доступа к табличным данным.
# Указываем полный путь от корня проекта для ясности.
from data_models import DataService

class Category1Calculator:
    """
    Класс-калькулятор для категории 1: "Стационарное сжигание топлива".
    Предоставляет методы для выполнения расчетов на основе данных,
    полученных из пользовательского интерфейса.
    """

    def __init__(self, data_service: DataService):
        """
        Конструктор класса.
        
        :param data_service: Экземпляр сервиса для доступа к таблицам с коэффициентами.
        """
        self.data_service = data_service

    def calculate_co2_emissions(self, fuel_name: str, fuel_consumption: float, oxidation_factor: float) -> float:
        """
        Рассчитывает выбросы CO2 от сжигания одного вида топлива.
        
        Этот метод реализует основную формулу 1.1 из методических указаний:
        E_CO2 = FC * EF_CO2 * OF
        
        Для унификации расчетов все данные приводятся к энергетическому эквиваленту в ТДж.

        :param fuel_name: Наименование вида топлива, выбранное пользователем.
        :param fuel_consumption: Расход топлива в натуральных единицах (тонны или тыс. м3).
        :param oxidation_factor: Коэффициент окисления топлива (доля, от 0 до 1).
        :return: Масса выбросов CO2 в тоннах.
        """
        # 1. Получение всех данных по выбранному топливу из Таблицы 1.1
        fuel_data = self.data_service.get_fuel_data_table_1_1(fuel_name)
        if not fuel_data:
            # Если по какой-то причине данные не найдены, возвращаем 0, чтобы избежать ошибки.
            return 0.0

        # 2. Перевод расхода топлива из натуральных единиц в энергетический эквивалент (ТДж).
        # Используется формула 1.2b: FC(ТДж) = FC(натур.) * NCV * 10^-3
        # NCV - низшая теплота сгорания, МДж/кг или МДж/м3.
        # В таблице 1.1 она дана как ТДж/тонну или ТДж/тыс. м3, что эквивалентно МДж/кг или МДж/м3.
        # Поэтому дополнительное преобразование единиц не требуется.
        ncv = fuel_data.get('NCV', 0)
        fc_tj = fuel_consumption * ncv

        # 3. Получение коэффициента выбросов CO2, соответствующего энергетическим единицам (т CO2/ТДж).
        ef_co2_tj = fuel_data.get('EF_CO2_TJ', 0)

        # 4. Расчет выбросов CO2 по формуле 1.1.
        # E_CO2 (т) = FC (ТДж) * EF_CO2 (т CO2/ТДж) * OF (доля)
        # Коэффициент окисления (OF) по умолчанию для газа и жидкости равен 1.0.
        # Для твердого топлива может быть иным, но принимается из UI.
        co2_emissions = fc_tj * ef_co2_tj * oxidation_factor
        
        # В методике указано, что для рядовых углей из таблицы 1.1 коэффициент окисления уже учтен.
        # При их использовании OF принимается равным 1.
        # Для упрощения логики, предполагаем, что пользователь в UI установит OF=1 для этих углей,
        # следуя указаниям интерфейса.
        
        return co2_emissions