# main.py - Главный файл для запуска приложения.
# Этот модуль инициализирует все необходимые компоненты и запускает графический интерфейс.

# Стандартная библиотека для взаимодействия с системой, необходима для обработки аргументов командной строки.
import sys

# Импорт основных классов из библиотеки PyQt6 для создания GUI.
# QApplication управляет жизненным циклом приложения.
from PyQt6.QtWidgets import QApplication

# Импорт класса главного окна из нашего пакета ui.
# Это "Представление" (View) в нашей архитектуре.
from ui.main_window import MainWindow

# Импорт сервиса данных из модуля data_models.
# Это "Модель" (Model), предоставляющая доступ ко всем табличным данным.
from data_models import DataService

def main():
    """
    Основная функция, которая настраивает и запускает приложение.
    """
    # 1. Создание экземпляра QApplication.
    # Это обязательный шаг для любого приложения на PyQt.
    # sys.argv позволяет передавать приложению аргументы из командной строки.
    app = QApplication(sys.argv)

    # 2. Создание единого экземпляра сервиса данных.
    # Этот объект будет содержать все таблицы с коэффициентами и будет передан
    # во все части приложения, которым требуется доступ к этим данным.
    # Это гарантирует, что данные загружаются в память только один раз.
    data_service = DataService()

    # 3. Создание экземпляра главного окна.
    # В конструктор окна мы передаем data_service. Это называется "внедрение зависимости"
    # (dependency injection) и является хорошей практикой, так как окно теперь не
    # создает свой собственный экземпляр данных, а использует общий для всего приложения.
    # Это делает код более модульным и тестируемым.
    window = MainWindow(data_service)

    # 4. Отображение главного окна на экране.
    window.show()

    # 5. Запуск главного цикла событий приложения.
    # Эта строка блокирует выполнение скрипта до тех пор, пока пользователь не закроет окно.
    # app.exec() обрабатывает все действия пользователя (клики мыши, нажатия клавиш и т.д.).
    # sys.exit() обеспечивает корректное завершение программы и возврат кода выхода.
    sys.exit(app.exec())


# Эта конструкция является стандартной точкой входа в Python-скриптах.
# Код внутри этого блока будет выполнен только в том случае, если этот файл
# запускается напрямую, а не импортируется как модуль в другой файл.
if __name__ == "__main__":
    main()