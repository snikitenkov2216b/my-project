# data_models.py - Данные таблиц из методики расчета выбросов.
# Код исправлен и дополнен в соответствии с Приказом Минприроды РФ от 27.05.2022 N 371.
# Комментарии на русском. Поддержка UTF-8.
from typing import Dict, Optional, List
from dataclasses import dataclass
# Таблица 1.1: Коэффициенты перевода, EF_CO2, W_C по видам топлива
TABLE_1_1 = {
    # Жидкие топлива
    'Нефть, включая промысловый газоконденсат': {'unit': 'тонна', 'k_ut': 1.430, 'NCV': 41.9, 'EF_CO2_ut': 2.15, 'EF_CO2_TJ': 73.3, 'W_C_ut': 0.59, 'W_C_TJ': 20.0},
    'Природный газовый конденсат': {'unit': 'тонна', 'k_ut': 1.508, 'NCV': 44.2, 'EF_CO2_ut': 1.88, 'EF_CO2_TJ': 64.2, 'W_C_ut': 0.51, 'W_C_TJ': 17.5},
    'Газ попутный нефтяной (нефтяные месторождения)': {'unit': 'тыс. м3', 'k_ut': 1.154, 'NCV': 33.8, 'EF_CO2_ut': 1.77, 'EF_CO2_TJ': 60.4, 'W_C_ut': 0.48, 'W_C_TJ': 16.5},
    'Газ попутный нефтяной (газоконденсатные месторождения)': {'unit': 'тыс. м3', 'k_ut': 1.154, 'NCV': 33.8, 'EF_CO2_ut': 1.64, 'EF_CO2_TJ': 55.9, 'W_C_ut': 0.45, 'W_C_TJ': 15.3},
    'Газ попутный нефтяной (газовые месторождения)': {'unit': 'тыс. м3', 'k_ut': 1.154, 'NCV': 33.8, 'EF_CO2_ut': 1.62, 'EF_CO2_TJ': 55.2, 'W_C_ut': 0.44, 'W_C_TJ': 15.1},
    'Бензин автомобильный': {'unit': 'тонна', 'k_ut': 1.490, 'NCV': 43.7, 'EF_CO2_ut': 2.03, 'EF_CO2_TJ': 69.3, 'W_C_ut': 0.55, 'W_C_TJ': 18.9},
    'Бензин авиационный': {'unit': 'тонна', 'k_ut': 1.490, 'NCV': 43.7, 'EF_CO2_ut': 2.05, 'EF_CO2_TJ': 70.0, 'W_C_ut': 0.56, 'W_C_TJ': 19.1},
    'Авиационный керосин': {'unit': 'тонна', 'k_ut': 1.470, 'NCV': 43.1, 'EF_CO2_ut': 2.10, 'EF_CO2_TJ': 71.5, 'W_C_ut': 0.57, 'W_C_TJ': 19.5},
    'Керосин': {'unit': 'тонна', 'k_ut': 1.470, 'NCV': 43.1, 'EF_CO2_ut': 2.11, 'EF_CO2_TJ': 71.9, 'W_C_ut': 0.58, 'W_C_TJ': 19.6},
    'Топливо дизельное': {'unit': 'тонна', 'k_ut': 1.450, 'NCV': 42.5, 'EF_CO2_ut': 2.17, 'EF_CO2_TJ': 74.1, 'W_C_ut': 0.59, 'W_C_TJ': 20.2},
    'Мазут топочный': {'unit': 'тонна', 'k_ut': 1.370, 'NCV': 40.2, 'EF_CO2_ut': 2.27, 'EF_CO2_TJ': 77.4, 'W_C_ut': 0.62, 'W_C_TJ': 21.1},
    'Мазут флотский': {'unit': 'тонна', 'k_ut': 1.430, 'NCV': 41.9, 'EF_CO2_ut': 2.27, 'EF_CO2_TJ': 77.4, 'W_C_ut': 0.62, 'W_C_TJ': 21.1},
    'Топливо печное бытовое': {'unit': 'тонна', 'k_ut': 1.450, 'NCV': 42.5, 'EF_CO2_ut': 2.27, 'EF_CO2_TJ': 77.4, 'W_C_ut': 0.62, 'W_C_TJ': 21.1},
    'Газ сжиженный нефтяной': {'unit': 'тонна', 'k_ut': 1.570, 'NCV': 46.0, 'EF_CO2_ut': 1.85, 'EF_CO2_TJ': 63.1, 'W_C_ut': 0.50, 'W_C_TJ': 17.2},
    'Другие моторные топлива': {'unit': 'тонна', 'k_ut': 1.470, 'NCV': 43.1, 'EF_CO2_ut': 2.11, 'EF_CO2_TJ': 71.9, 'W_C_ut': 0.58, 'W_C_TJ': 19.6},
    'Нефтебитум': {'unit': 'тонна', 'k_ut': 1.350, 'NCV': 39.6, 'EF_CO2_ut': 2.37, 'EF_CO2_TJ': 80.7, 'W_C_ut': 0.65, 'W_C_TJ': 22.0},
    'Этан': {'unit': 'тонна', 'k_ut': 1.583, 'NCV': 46.4, 'EF_CO2_ut': 1.81, 'EF_CO2_TJ': 61.6, 'W_C_ut': 0.49, 'W_C_TJ': 16.8},
    'Пропан': {'unit': 'тонна', 'k_ut': 1.570, 'NCV': 46.0, 'EF_CO2_ut': 1.87, 'EF_CO2_TJ': 63.8, 'W_C_ut': 0.51, 'W_C_TJ': 17.4},
    'Бутан': {'unit': 'тонна', 'k_ut': 1.570, 'NCV': 46.0, 'EF_CO2_ut': 1.82, 'EF_CO2_TJ': 62.0, 'W_C_ut': 0.50, 'W_C_TJ': 16.9},
    'Пропан и бутан сжиженные, газы углеводородные и их смеси сжиженные': {'unit': 'тонна', 'k_ut': 1.570, 'NCV': 46.0, 'EF_CO2_ut': 1.85, 'EF_CO2_TJ': 63.2, 'W_C_ut': 0.51, 'W_C_TJ': 17.3},
    'Лигроин': {'unit': 'тонна', 'k_ut': 1.536, 'NCV': 45.0, 'EF_CO2_ut': 2.15, 'EF_CO2_TJ': 73.3, 'W_C_ut': 0.59, 'W_C_TJ': 20.0},
    'Смазочные материалы': {'unit': 'тонна', 'k_ut': 1.372, 'NCV': 40.2, 'EF_CO2_ut': 2.15, 'EF_CO2_TJ': 73.3, 'W_C_ut': 0.59, 'W_C_TJ': 20.0},
    'Газ нефтеперерабатывающих предприятий сухой': {'unit': 'тонна', 'k_ut': 1.500, 'NCV': 44.0, 'EF_CO2_ut': 1.30, 'EF_CO2_TJ': 44.4, 'W_C_ut': 0.35, 'W_C_TJ': 12.1},
    'Кокс нефтяной и сланцевый': {'unit': 'тонна', 'k_ut': 1.080, 'NCV': 31.7, 'EF_CO2_ut': 2.86, 'EF_CO2_TJ': 97.5, 'W_C_ut': 0.78, 'W_C_TJ': 26.6},
    'Другие нефтепродукты': {'unit': 'тонна', 'k_ut': 1.430, 'NCV': 41.9, 'EF_CO2_ut': 2.15, 'EF_CO2_TJ': 73.3, 'W_C_ut': 0.59, 'W_C_TJ': 20.0},
    
    # Твердые топлива
    'Рядовой уголь: донецкий': {'unit': 'тонна', 'k_ut': 0.876, 'NCV': 25.7, 'EF_CO2_ut': 2.65, 'EF_CO2_TJ': 90.2, 'W_C_ut': 0.72, 'W_C_TJ': 24.6},
    'Рядовой уголь: кузнецкий': {'unit': 'тонна', 'k_ut': 0.867, 'NCV': 25.4, 'EF_CO2_ut': 2.69, 'EF_CO2_TJ': 91.9, 'W_C_ut': 0.73, 'W_C_TJ': 25.1},
    'Рядовой уголь: карагандинский': {'unit': 'тонна', 'k_ut': 0.726, 'NCV': 21.3, 'EF_CO2_ut': 2.76, 'EF_CO2_TJ': 94.2, 'W_C_ut': 0.75, 'W_C_TJ': 25.7},
    'Рядовой уголь: подмосковный': {'unit': 'тонна', 'k_ut': 0.335, 'NCV': 9.82, 'EF_CO2_ut': 2.79, 'EF_CO2_TJ': 95.0, 'W_C_ut': 0.76, 'W_C_TJ': 25.9},
    'Рядовой уголь: воркутинский': {'unit': 'тонна', 'k_ut': 0.822, 'NCV': 24.1, 'EF_CO2_ut': 2.71, 'EF_CO2_TJ': 92.6, 'W_C_ut': 0.74, 'W_C_TJ': 25.3},
    'Рядовой уголь: интинский': {'unit': 'тонна', 'k_ut': 0.649, 'NCV': 19.0, 'EF_CO2_ut': 2.73, 'EF_CO2_TJ': 93.1, 'W_C_ut': 0.75, 'W_C_TJ': 25.4},
    'Рядовой уголь: челябинский': {'unit': 'тонна', 'k_ut': 0.552, 'NCV': 16.2, 'EF_CO2_ut': 2.78, 'EF_CO2_TJ': 94.9, 'W_C_ut': 0.76, 'W_C_TJ': 25.9},
    'Рядовой уголь: свердловский': {'unit': 'тонна', 'k_ut': 0.330, 'NCV': 9.67, 'EF_CO2_ut': 2.76, 'EF_CO2_TJ': 94.2, 'W_C_ut': 0.75, 'W_C_TJ': 25.7},
    'Рядовой уголь: башкирский': {'unit': 'тонна', 'k_ut': 0.264, 'NCV': 7.74, 'EF_CO2_ut': 2.76, 'EF_CO2_TJ': 94.2, 'W_C_ut': 0.75, 'W_C_TJ': 25.7},
    'Рядовой уголь: нерюнгринский': {'unit': 'тонна', 'k_ut': 0.987, 'NCV': 28.9, 'EF_CO2_ut': 2.76, 'EF_CO2_TJ': 94.2, 'W_C_ut': 0.75, 'W_C_TJ': 25.7},
    'Рядовой уголь: якутский': {'unit': 'тонна', 'k_ut': 0.751, 'NCV': 22.0, 'EF_CO2_ut': 2.76, 'EF_CO2_TJ': 94.2, 'W_C_ut': 0.75, 'W_C_TJ': 25.7},
    'Рядовой уголь: черемховский': {'unit': 'тонна', 'k_ut': 0.752, 'NCV': 22.0, 'EF_CO2_ut': 2.75, 'EF_CO2_TJ': 94.0, 'W_C_ut': 0.75, 'W_C_TJ': 25.7},
    'Рядовой уголь: азейский': {'unit': 'тонна', 'k_ut': 0.483, 'NCV': 14.2, 'EF_CO2_ut': 2.75, 'EF_CO2_TJ': 93.9, 'W_C_ut': 0.75, 'W_C_TJ': 25.6},
    'Рядовой уголь: читинский': {'unit': 'тонна', 'k_ut': 0.483, 'NCV': 14.2, 'EF_CO2_ut': 2.90, 'EF_CO2_TJ': 98.9, 'W_C_ut': 0.79, 'W_C_TJ': 27.0},
    'Рядовой уголь: гусиноозерский': {'unit': 'тонна', 'k_ut': 0.506, 'NCV': 14.8, 'EF_CO2_ut': 2.78, 'EF_CO2_TJ': 94.9, 'W_C_ut': 0.76, 'W_C_TJ': 25.9},
    'Рядовой уголь: хакасский': {'unit': 'тонна', 'k_ut': 0.727, 'NCV': 21.3, 'EF_CO2_ut': 2.77, 'EF_CO2_TJ': 94.4, 'W_C_ut': 0.76, 'W_C_TJ': 25.8},
    'Рядовой уголь: канско-ачинский': {'unit': 'тонна', 'k_ut': 0.516, 'NCV': 15.1, 'EF_CO2_ut': 2.87, 'EF_CO2_TJ': 98.1, 'W_C_ut': 0.78, 'W_C_TJ': 26.8},
    'Рядовой уголь: тувинский': {'unit': 'тонна', 'k_ut': 0.906, 'NCV': 26.6, 'EF_CO2_ut': 2.76, 'EF_CO2_TJ': 94.2, 'W_C_ut': 0.75, 'W_C_TJ': 25.7},
    'Рядовой уголь: тунгусский': {'unit': 'тонна', 'k_ut': 0.754, 'NCV': 22.1, 'EF_CO2_ut': 2.76, 'EF_CO2_TJ': 94.2, 'W_C_ut': 0.75, 'W_C_TJ': 25.7},
    'Рядовой уголь: магаданский': {'unit': 'тонна', 'k_ut': 0.701, 'NCV': 20.5, 'EF_CO2_ut': 2.73, 'EF_CO2_TJ': 93.1, 'W_C_ut': 0.75, 'W_C_TJ': 25.4},
    'Рядовой уголь: арктический (шпицбергенский)': {'unit': 'тонна', 'k_ut': 0.669, 'NCV': 19.6, 'EF_CO2_ut': 2.76, 'EF_CO2_TJ': 94.2, 'W_C_ut': 0.75, 'W_C_TJ': 25.7},
    'Рядовой уголь: норильский': {'unit': 'тонна', 'k_ut': 0.761, 'NCV': 22.3, 'EF_CO2_ut': 2.76, 'EF_CO2_TJ': 94.2, 'W_C_ut': 0.75, 'W_C_TJ': 25.7},
    'Рядовой уголь: огоджинский': {'unit': 'тонна', 'k_ut': 0.447, 'NCV': 13.1, 'EF_CO2_ut': 2.76, 'EF_CO2_TJ': 94.2, 'W_C_ut': 0.75, 'W_C_TJ': 25.7},
    'Рядовой уголь: камчатский': {'unit': 'тонна', 'k_ut': 0.323, 'NCV': 9.47, 'EF_CO2_ut': 2.73, 'EF_CO2_TJ': 93.1, 'W_C_ut': 0.75, 'W_C_TJ': 25.4},
    'Рядовой уголь: Приморья': {'unit': 'тонна', 'k_ut': 0.506, 'NCV': 14.8, 'EF_CO2_ut': 2.73, 'EF_CO2_TJ': 93.1, 'W_C_ut': 0.75, 'W_C_TJ': 25.4},
    'Рядовой уголь: экибастузский': {'unit': 'тонна', 'k_ut': 0.628, 'NCV': 18.4, 'EF_CO2_ut': 2.77, 'EF_CO2_TJ': 94.6, 'W_C_ut': 0.76, 'W_C_TJ': 25.8},
    'Рядовой уголь: алтайский': {'unit': 'тонна', 'k_ut': 0.782, 'NCV': 22.9, 'EF_CO2_ut': 2.76, 'EF_CO2_TJ': 94.2, 'W_C_ut': 0.75, 'W_C_TJ': 25.7},
    'Рядовой уголь: тугнуйский': {'unit': 'тонна', 'k_ut': 0.692, 'NCV': 20.3, 'EF_CO2_ut': 2.76, 'EF_CO2_TJ': 94.2, 'W_C_ut': 0.75, 'W_C_TJ': 25.7},
    'Рядовой уголь: прочих месторождений': {'unit': 'тонна', 'k_ut': 0.768, 'NCV': 22.5, 'EF_CO2_ut': 2.76, 'EF_CO2_TJ': 94.2, 'W_C_ut': 0.75, 'W_C_TJ': 25.7},
    'Рядовой уголь: импортный': {'unit': 'тонна', 'k_ut': 0.768, 'NCV': 22.5, 'EF_CO2_ut': 2.76, 'EF_CO2_TJ': 94.2, 'W_C_ut': 0.75, 'W_C_TJ': 25.7},
    'Антрацит': {'unit': 'тонна', 'k_ut': 0.911, 'NCV': 26.7, 'EF_CO2_ut': 2.88, 'EF_CO2_TJ': 98.3, 'W_C_ut': 0.79, 'W_C_TJ': 26.8},
    'Коксующийся уголь': {'unit': 'тонна', 'k_ut': 0.962, 'NCV': 28.2, 'EF_CO2_ut': 2.77, 'EF_CO2_TJ': 94.6, 'W_C_ut': 0.76, 'W_C_TJ': 25.8},
    'Каменный уголь': {'unit': 'тонна', 'k_ut': 0.768, 'NCV': 22.5, 'EF_CO2_ut': 2.77, 'EF_CO2_TJ': 94.6, 'W_C_ut': 0.76, 'W_C_TJ': 25.8},
    'Бурый уголь': {'unit': 'тонна', 'k_ut': 0.467, 'NCV': 13.7, 'EF_CO2_ut': 2.96, 'EF_CO2_TJ': 101.0, 'W_C_ut': 0.81, 'W_C_TJ': 27.6},
    'Сланцы горючие': {'unit': 'тонна', 'k_ut': 0.300, 'NCV': 8.79, 'EF_CO2_ut': 3.14, 'EF_CO2_TJ': 107.0, 'W_C_ut': 0.86, 'W_C_TJ': 29.2},
    'Брикеты угольные': {'unit': 'тонна', 'k_ut': 0.605, 'NCV': 17.7, 'EF_CO2_ut': 2.86, 'EF_CO2_TJ': 97.5, 'W_C_ut': 0.78, 'W_C_TJ': 26.6},
    'Кокс металлургический': {'unit': 'тонна', 'k_ut': 0.990, 'NCV': 29.0, 'EF_CO2_ut': 3.14, 'EF_CO2_TJ': 107.0, 'W_C_ut': 0.86, 'W_C_TJ': 29.2},
    'Смола каменноугольная коксохимических заводов': {'unit': 'тонна', 'k_ut': 1.300, 'NCV': 38.1, 'EF_CO2_ut': 2.37, 'EF_CO2_TJ': 80.7, 'W_C_ut': 0.65, 'W_C_TJ': 22.0},
    
    # Газы
    'Газ горючий искусственный коксовый': {'unit': 'тыс. м3', 'k_ut': 0.570, 'NCV': 16.7, 'EF_CO2_ut': 1.30, 'EF_CO2_TJ': 44.4, 'W_C_ut': 0.35, 'W_C_TJ': 12.1},
    'Газ горючий искусственный доменный': {'unit': 'тыс. м3', 'k_ut': 0.143, 'NCV': 4.19, 'EF_CO2_ut': 7.62, 'EF_CO2_TJ': 260.0, 'W_C_ut': 2.08, 'W_C_TJ': 71.0},
    'Газ горючий искусственный конвертерный': {'unit': 'тыс. м3', 'k_ut': 0.240, 'NCV': 7.06, 'EF_CO2_ut': 5.33, 'EF_CO2_TJ': 182.0, 'W_C_ut': 0.35, 'W_C_TJ': 49.6},
    'Газ горючий природный (естественный)': {'unit': 'тыс. м3', 'k_ut': 1.129, 'NCV': 33.08, 'EF_CO2_ut': 1.59, 'EF_CO2_TJ': 54.4, 'W_C_ut': 0.43, 'W_C_TJ': 14.8},
    'Газ компримированный': {'unit': 'тыс. м3', 'k_ut': 1.129, 'NCV': 33.08, 'EF_CO2_ut': 1.59, 'EF_CO2_TJ': 54.4, 'W_C_ut': 0.43, 'W_C_TJ': 14.8},
    'Газ сжиженный': {'unit': 'тонна', 'k_ut': 1.570, 'NCV': 46.0, 'EF_CO2_ut': 1.65, 'EF_CO2_TJ': 56.4, 'W_C_ut': 0.45, 'W_C_TJ': 15.4},
    
    # Торф
    'Торф топливный': {'unit': 'тонна', 'k_ut': 0.340, 'NCV': 10.0, 'EF_CO2_ut': 3.11, 'EF_CO2_TJ': 106.0, 'W_C_ut': 0.85, 'W_C_TJ': 28.9},
    'Брикеты и полубрикеты торфяные': {'unit': 'тонна', 'k_ut': 0.600, 'NCV': 17.6, 'EF_CO2_ut': 3.11, 'EF_CO2_TJ': 106.0, 'W_C_ut': 0.85, 'W_C_TJ': 28.9},
    
    # Отходы
    'Отходы бытовые (небиологическая фракция)': {'unit': 'тонна', 'k_ut': 0.341, 'NCV': 10.0, 'EF_CO2_ut': 2.69, 'EF_CO2_TJ': 91.7, 'W_C_ut': 0.73, 'W_C_TJ': 25.0},
    'Прочие горючие отходы технологических производств': {'unit': 'тонна у.т.', 'k_ut': 1.000, 'NCV': 29.3, 'EF_CO2_ut': 4.19, 'EF_CO2_TJ': 143.0, 'W_C_ut': 1.14, 'W_C_TJ': 39.0},
    'Нефтяные отходы': {'unit': 'тонна', 'k_ut': 1.372, 'NCV': 40.2, 'EF_CO2_ut': 2.12, 'EF_CO2_TJ': 72.2, 'W_C_ut': 0.58, 'W_C_TJ': 19.7},
    
    # Биотоплива
    'Биобензин': {'unit': 'тонна', 'k_ut': 0.921, 'NCV': 27.0, 'EF_CO2_ut': 2.07, 'EF_CO2_TJ': 70.8, 'W_C_ut': 0.57, 'W_C_TJ': 19.3},
    'Био-дизтопливо': {'unit': 'тонна', 'k_ut': 0.921, 'NCV': 27.0, 'EF_CO2_ut': 2.07, 'EF_CO2_TJ': 70.8, 'W_C_ut': 0.57, 'W_C_TJ': 19.3},
    'Другие виды жидкого биотоплива': {'unit': 'тонна', 'k_ut': 0.935, 'NCV': 27.4, 'EF_CO2_ut': 2.33, 'EF_CO2_TJ': 79.6, 'W_C_ut': 0.63, 'W_C_TJ': 21.7},
}

# Таблица 1.2: Плотность CO2 и CH4 при разных условиях
TABLE_1_2 = [
    {'N': 1, 'conditions': '273,15 К (0 °C); 101,325 кПа', 'rho_CO2': 1.9768, 'rho_CH4': 0.7170},
    {'N': 2, 'conditions': '288,15 К (15 °C); 101,325 кПа', 'rho_CO2': 1.8738, 'rho_CH4': 0.6797},
    {'N': 3, 'conditions': '293,15 К (20 °C); 101,325 кПа', 'rho_CO2': 1.8393, 'rho_CH4': 0.6680},
]

# Таблица 2.1: Коэффициенты выбросов для факелов
TABLE_2_1 = [
    {'N': 1, 'type': 'Газ природный', 'EF_CO2_t': 2.6986, 'EF_CO2_m3': 1.8263, 'EF_CH4_t': 0.0006, 'EF_CH4_m3': 0.0004},
    {'N': 2, 'type': 'Попутный нефтяной газ', 'EF_CO2_t': 2.6121, 'EF_CO2_m3': 3.3689, 'EF_CH4_t': 0.0041, 'EF_CH4_m3': 0.0053},
    {'N': 3, 'type': 'Газ дегазации угольных пластов', 'EF_CO2_t': 1.8863, 'EF_CO2_m3': 1.6294, 'EF_CH4_t': 0.0206, 'EF_CH4_m3': 0.0178},
    {'N': 4, 'type': 'Газ газоконденсатных месторождений', 'EF_CO2_t': 2.7470, 'EF_CO2_m3': 2.0245, 'EF_CH4_t': 0.0005, 'EF_CH4_m3': 0.0004},
]


# Таблица 2.2: Коэффициенты недожога
TABLE_2_2 = [
    {'N': 1, 'condition': 'Бессажевое сжигание', 'CF': 0.0006},
    {'N': 2, 'condition': 'Сажевое сжигание', 'CF': 0.035},
    {'N': 3, 'condition': 'Нефтяные, газоконденсатные и газовые месторождения', 'CF': 0.02},
    {'N': 4, 'condition': 'Нефтеперерабатывающие и прочие предприятия', 'CF': 0.005},
]

# Таблица 3.1: Концентрации для фугитивных выбросов
TABLE_3_1 = [
    {'N': 1, 'type': 'Газ природный (сероводородсодержащие месторождения)', 'W_CH4': 51.5, 'W_CO2': 14.2},
    {'N': 2, 'type': 'Газ природный', 'W_CH4': 98.4, 'W_CO2': 0.04},
    {'N': 3, 'type': 'Попутный нефтяной газ', 'W_CH4': 89.8, 'W_CO2': 8.4},
    {'N': 4, 'type': 'Газ дегазации угольных пластов', 'W_CH4': 76.0, 'W_CO2': 10.6},
]

# Таблица 6.1: Коэффициенты выбросов CO2 для карбонатов
TABLE_6_1 = [
    {'formula': 'CaCO3', 'EF_CO2': 0.440},
    {'formula': 'MgCO3', 'EF_CO2': 0.522},
    {'formula': 'CaMg(CO3)2', 'EF_CO2': 0.477},
    {'formula': 'FeCO3', 'EF_CO2': 0.380},
]

# Таблица 6.2: Коэффициенты выбросов CO2 для оксидов
TABLE_6_2 = [
    {'formula': 'CaO', 'EF_CO2': 0.785},
    {'formula': 'MgO', 'EF_CO2': 1.092},
]

# Таблица 8.1: Коэффициенты выбросов CO2 для карбонатов (производство стекла)
TABLE_8_1 = [
    {'formula': 'Na2CO3', 'EF_CO2': 0.415},
    {'formula': 'NaHCO3', 'EF_CO2': 0.524},
    {'formula': 'BaCO3', 'EF_CO2': 0.223},
    {'formula': 'K2CO3', 'EF_CO2': 0.318},
    {'formula': 'Li2CO3', 'EF_CO2': 0.596},
    {'formula': 'SrCO3', 'EF_CO2': 0.284},
]

# Таблица 11.1: Коэффициенты выбросов N2O
TABLE_11_1 = [
    {'process': 'Азотная кислота: неселективное каталитическое восстановление', 'EF_N2O': 2.0, 'unit': 'кг N2O/тонну'},
    {'process': 'Азотная кислота: разрушение N2O в процессе синтеза', 'EF_N2O': 2.5, 'unit': 'кг N2O/тонну'},
    {'process': 'Азотная кислота: низкое давление', 'EF_N2O': 5.0, 'unit': 'кг N2O/тонну'},
    {'process': 'Азотная кислота: среднее давление', 'EF_N2O': 7.5, 'unit': 'кг N2O/тонну'},
    {'process': 'Азотная кислота: высокое давление', 'EF_N2O': 9.0, 'unit': 'кг N2O/тонну'},
    {'process': 'Глиоксаль: без очистки выбросов', 'EF_N2O': 0.52, 'unit': 'т N2O/тонну'},
    {'process': 'Глиоксаль: с очисткой выбросов', 'EF_N2O': 0.10, 'unit': 'т N2O/тонну'},
    {'process': 'Глиоксиловая кислота: без очистки выбросов', 'EF_N2O': 0.10, 'unit': 'т N2O/тонну'},
    {'process': 'Глиоксиловая кислота: с очисткой выбросов', 'EF_N2O': 0.02, 'unit': 'т N2O/тонну'},
    {'process': 'Капролактам: метод Рашига', 'EF_N2O': 9.0, 'unit': 'кг N2O/тонну'},
    {'process': 'Капролактам: восстановление NO', 'EF_N2O': 2.0, 'unit': 'кг N2O/тонну'},
]


# Таблица 12.1: Содержание углерода в сырье и продуктах нефтехимического производства
TABLE_12_1 = [
    {'substance': 'Ацетонитрил', 'W_C': 0.5852},
    {'substance': 'Акрилонитрил', 'W_C': 0.6664},
    {'substance': 'Бутадиен', 'W_C': 0.888},
    {'substance': 'Сажа', 'W_C': 0.970},
    {'substance': 'Сырье углеродной сажи', 'W_C': 0.900},
    {'substance': 'Этан', 'W_C': 0.856},
    {'substance': 'Этилен', 'W_C': 0.856},
    {'substance': 'Этилендихлорид', 'W_C': 0.243},
    {'substance': 'Этиленгликоль', 'W_C': 0.387},
    {'substance': 'Окись этилена', 'W_C': 0.545},
    {'substance': 'Циановодород', 'W_C': 0.4444},
    {'substance': 'Метанол', 'W_C': 0.375},
    {'substance': 'Метан', 'W_C': 0.749},
    {'substance': 'Пропан', 'W_C': 0.817},
    {'substance': 'Пропилен', 'W_C': 0.8563},
    {'substance': 'Мономер хлористый винил', 'W_C': 0.384},
]

# Таблица 14.1: Содержание углерода в сырье, материалах и продукции металлургического производства
TABLE_14_1 = [
    {'material': 'Железо прямого восстановления', 'W_C': 0.017},
    {'material': 'Железо горячего брикетирования', 'W_C': 0.013},
    {'material': 'Сталь, стальной лом', 'W_C': 0.0025},
    {'material': 'Чугун, чугунный лом', 'W_C': 0.043},
    {'material': 'Электроды для электродуговых печей', 'W_C': 0.82},
    {'material': 'Углеродсодержащие материалы для сталеплавильных печей', 'W_C': 0.83},
    {'material': 'Известняк', 'W_C': 0.12},
    {'material': 'Доломит', 'W_C': 0.13},
]

# Таблица 16.1: Коэффициенты для расчета выбросов от производства алюминия
TABLE_16_1 = [
    {'technology': 'CWPB', 'S_CF4': 0.143, 'F_C2F6_CF4': 0.121},
    {'technology': 'VSS', 'S_CF4': 0.092, 'F_C2F6_CF4': 0.053},
    {'technology': 'HSS', 'S_CF4': 0.099, 'F_C2F6_CF4': 0.085},
]

# Таблица 18.1: Коэффициенты выбросов CO2 и плотность для транспортных топлив
TABLE_18_1 = [
    {'fuel': 'Бензин А-76 (АИ-80)', 'EF_CO2_t': 3.026, 'EF_CO2_TJ': 69300, 'EF_CO2_ut': 2.031, 'rho': 0.715},
    {'fuel': 'Бензин АИ-92', 'EF_CO2_t': 3.026, 'EF_CO2_TJ': 69300, 'EF_CO2_ut': 2.031, 'rho': 0.735},
    {'fuel': 'Бензин АИ-93', 'EF_CO2_t': 3.026, 'EF_CO2_TJ': 69300, 'EF_CO2_ut': 2.031, 'rho': 0.745},
    {'fuel': 'Бензин АИ-95', 'EF_CO2_t': 3.026, 'EF_CO2_TJ': 69300, 'EF_CO2_ut': 2.031, 'rho': 0.750},
    {'fuel': 'Бензин АИ-98', 'EF_CO2_t': 3.026, 'EF_CO2_TJ': 69300, 'EF_CO2_ut': 2.031, 'rho': 0.765},
    {'fuel': 'Дизельное топливо летнее', 'EF_CO2_t': 3.149, 'EF_CO2_TJ': 74100, 'EF_CO2_ut': 2.172, 'rho': 0.860},
    {'fuel': 'Дизельное топливо зимнее', 'EF_CO2_t': 3.149, 'EF_CO2_TJ': 74100, 'EF_CO2_ut': 2.172, 'rho': 0.840},
    {'fuel': 'Дизельное топливо арктическое', 'EF_CO2_t': 3.149, 'EF_CO2_TJ': 74100, 'EF_CO2_ut': 2.172, 'rho': 0.830},
    {'fuel': 'Сжиженный нефтяной газ (СНГ) (пропан)', 'EF_CO2_t': 2.903, 'EF_CO2_TJ': 63100, 'EF_CO2_ut': 1.849, 'rho': 0.528},
    {'fuel': 'Сжиженный нефтяной газ СНГ (изобутан)', 'EF_CO2_t': 2.903, 'EF_CO2_TJ': 63100, 'EF_CO2_ut': 1.849, 'rho': 0.582},
    {'fuel': 'Сжиженный нефтяной газ СНГ (н-бутан)', 'EF_CO2_t': 2.903, 'EF_CO2_TJ': 63100, 'EF_CO2_ut': 1.849, 'rho': 0.601},
    {'fuel': 'Компримированный природный газ (КПГ)', 'EF_CO2_t': 1.840, 'EF_CO2_TJ': 54400, 'EF_CO2_ut': 1.594, 'rho': 0.668},
    {'fuel': 'Сжиженный природный газ (СПГ)', 'EF_CO2_t': 2.710, 'EF_CO2_TJ': 54400, 'EF_CO2_ut': 1.594, 'rho': 0.424},
    {'fuel': 'Авиационный керосин', 'EF_CO2_t': 3.16, 'EF_CO2_TJ': 71900, 'EF_CO2_ut': 2.100, 'rho': 0.8},
    {'fuel': 'Авиационный бензин', 'EF_CO2_t': 3.10, 'EF_CO2_TJ': 69300, 'EF_CO2_ut': 2.050, 'rho': 0.8},
    {'fuel': 'Топливо для реактивных двигателей', 'EF_CO2_t': 3.10, 'EF_CO2_TJ': 71900, 'EF_CO2_ut': 2.110, 'rho': 0.8},
    {'fuel': 'Смазочные материалы', 'EF_CO2_t': 2.95, 'EF_CO2_TJ': None, 'EF_CO2_ut': None, 'rho': None},
    {'fuel': 'Топочный мазут', 'EF_CO2_t': None, 'EF_CO2_TJ': 77400, 'EF_CO2_ut': None, 'rho': None},
    {'fuel': 'Твердые топлива (уголь): Донецкий', 'EF_CO2_t': 2.32, 'EF_CO2_TJ': None, 'EF_CO2_ut': None, 'rho': None},
    {'fuel': 'Твердые топлива (уголь): Кузнецкий', 'EF_CO2_t': 2.33, 'EF_CO2_TJ': None, 'EF_CO2_ut': None, 'rho': None},
    {'fuel': 'Твердые топлива (уголь): Нерюнгринский', 'EF_CO2_t': 2.72, 'EF_CO2_TJ': None, 'EF_CO2_ut': None, 'rho': None},
    {'fuel': 'Твердые топлива (уголь): Черемховский', 'EF_CO2_t': 2.07, 'EF_CO2_TJ': None, 'EF_CO2_ut': None, 'rho': None},
    {'fuel': 'Твердые топлива (уголь): Канско-Ачинский', 'EF_CO2_t': 1.48, 'EF_CO2_TJ': None, 'EF_CO2_ut': None, 'rho': None},
    {'fuel': 'Твердые топлива (уголь): Казахский (Каражаринский)', 'EF_CO2_t': 1.38, 'EF_CO2_TJ': None, 'EF_CO2_ut': None, 'rho': None},
    {'fuel': 'Твердые топлива (уголь): Азейский', 'EF_CO2_t': 1.33, 'EF_CO2_TJ': None, 'EF_CO2_ut': None, 'rho': None},
    {'fuel': 'Твердые топлива (уголь): Читинский', 'EF_CO2_t': 1.40, 'EF_CO2_TJ': None, 'EF_CO2_ut': None, 'rho': None},
    {'fuel': 'Торф: Торф топливный', 'EF_CO2_t': 1.06, 'EF_CO2_TJ': None, 'EF_CO2_ut': None, 'rho': None},
    {'fuel': 'Торф: Брикеты и полубрикеты торфяные', 'EF_CO2_t': 1.87, 'EF_CO2_TJ': None, 'EF_CO2_ut': None, 'rho': None},
    {'fuel': 'Отходы: Отходы бытовые (небиологическая фракция)', 'EF_CO2_t': 0.92, 'EF_CO2_TJ': None, 'EF_CO2_ut': None, 'rho': None},
    {'fuel': 'Отходы: Нефтяные отходы', 'EF_CO2_t': 2.91, 'EF_CO2_TJ': None, 'EF_CO2_ut': None, 'rho': None},
    {'fuel': 'Отходы: Прочие горючие отходы производства (т у.т.)', 'EF_CO2_t': 4.19, 'EF_CO2_TJ': None, 'EF_CO2_ut': None, 'rho': None},
]


# Таблица 19.1: Коэффициенты выбросов CO2 для дорожного хозяйства
TABLE_19_1 = {
    "Автомобильные дороги федерального значения": {
        "Содержание": {"I": 43.73, "II": 25.00, "III": 16.22, "IV": 14.09, "V": 11.65},
        "Ремонт": {"I": 533.28, "II": 271.70, "III": 195.84, "IV": 190.16, "V": 52.05},
        "Капитальный ремонт": {"I": 1556.92, "II": 713.82, "III": 544.34, "IV": 526.10, "V": 175.33},
        "Строительство": {"I": 2958.14, "II": 1356.26, "III": 1034.25, "IV": 999.6, "V": 333.13},
    },
    "Автомобильные дороги регионального или межмуниципального, местного значения": {
        "Содержание": {"I": 37.38, "II": 21.37, "III": 7.72, "IV": 4.28, "V": 2.94},
        "Ремонт": {"I": 419.91, "II": 177.58, "III": 128.00, "IV": 98.02, "V": 26.83},
        "Капитальный ремонт": {"I": 1541.50, "II": 679.83, "III": 477.49, "IV": 290.66, "V": 96.87},
        "Строительство": {"I": 2293.13, "II": 1004.64, "III": 808.01, "IV": 740.44, "V": 246.76},
    }
}

# Таблица 20.2: Параметры для компонентов ТКО
TABLE_20_2 = {
    "Бумага/картон": {"dry_matter": 0.75, "doc_wet": 0.27, "doc_dry": 0.36, "total_c_dry": 0.37, "fossil_c_fraction": 0.02},
    "Текстиль": {"dry_matter": 0.80, "doc_wet": 0.32, "doc_dry": 0.40, "total_c_dry": 0.51, "fossil_c_fraction": 0.20},
    "Пищевые отходы": {"dry_matter": 0.28, "doc_wet": 0.13, "doc_dry": 0.45, "total_c_dry": 0.45, "fossil_c_fraction": 0.0},
    "Древесина": {"dry_matter": 0.80, "doc_wet": 0.41, "doc_dry": 0.51, "total_c_dry": 0.51, "fossil_c_fraction": 0.0},
    "Отходы от парков и садов": {"dry_matter": 0.40, "doc_wet": 0.20, "doc_dry": 0.49, "total_c_dry": 0.49, "fossil_c_fraction": 0.0},
    "Подгузники": {"dry_matter": 0.40, "doc_wet": 0.24, "doc_dry": 0.60, "total_c_dry": 0.70, "fossil_c_fraction": 0.10},
    "Резина и кожа": {"dry_matter": 0.95, "doc_wet": None, "doc_dry": None, "total_c_dry": 0.68, "fossil_c_fraction": 0.20},
    "Пластик": {"dry_matter": 0.92, "doc_wet": None, "doc_dry": None, "total_c_dry": 0.60, "fossil_c_fraction": 1.0},
    "Кости": {"dry_matter": 0.76, "doc_wet": 0.41, "doc_dry": 0.54, "total_c_dry": 0.54, "fossil_c_fraction": 0.0},
    "Металл": {"dry_matter": 1.0, "doc_wet": None, "doc_dry": None, "total_c_dry": None, "fossil_c_fraction": None},
    "Стекло": {"dry_matter": 1.0, "doc_wet": None, "doc_dry": None, "total_c_dry": None, "fossil_c_fraction": None},
    "Отсев": {"dry_matter": 0.80, "doc_wet": 0.07, "doc_dry": 0.09, "total_c_dry": 0.17, "fossil_c_fraction": 0.50},
    "Другие отходы": {"dry_matter": 0.92, "doc_wet": None, "doc_dry": None, "total_c_dry": 0.51, "fossil_c_fraction": 1.0},
}

# Таблица 20.3: Усредненный состав ТКО
TABLE_20_3 = {
    "Средняя климатическая зона": {
        "1990": {"Бумага": 27.5, "Текстиль": 5.5, "Пищевые отходы": 34.0, "Древесина": 2.2, "Резина и кожа": 3.0, "Пластик": 3.5, "Кости": 1.25, "Металл, стекло, камни": 11.5, "Отсев менее 16 мм": 10.0, "Прочие": 1.5},
        "2001": {"Бумага": 33.5, "Текстиль": 4.0, "Пищевые отходы": 40.0, "Древесина": 1.5, "Резина и кожа": 0.7, "Пластик": 3.5, "Кости": 1.5, "Металл, стекло, камни": 6.5, "Отсев менее 16 мм": 6.0, "Прочие": 2.7},
        "2005": {"Бумага": 39.0, "Текстиль": 4.0, "Пищевые отходы": 32.0, "Древесина": 1.5, "Резина и кожа": 0.7, "Пластик": 5.5, "Кости": 1.5, "Металл, стекло, камни": 8.2, "Отсев менее 16 мм": 6.0, "Прочие": 1.5},
    },
    "Южная климатическая зона": {
        "1990": {"Бумага": 24.0, "Текстиль": 5.5, "Пищевые отходы": 40.0, "Древесина": 1.5, "Резина и кожа": 2.0, "Пластик": 2.0, "Кости": 1.5, "Металл, стекло, камни": 8.0, "Отсев менее 16 мм": 14.0, "Прочие": 1.5},
        "2001": {"Бумага": 26.0, "Текстиль": 4.0, "Пищевые отходы": 44.5, "Древесина": 1.5, "Резина и кожа": 1.0, "Пластик": 4.5, "Кости": 1.5, "Металл, стекло, камни": 7.0, "Отсев менее 16 мм": 7.0, "Прочие": 3.0},
        "2005": {"Бумага": 27.5, "Текстиль": 4.0, "Пищевые отходы": 41.0, "Древесина": 1.5, "Резина и кожа": 1.0, "Пластик": 5.5, "Кости": 1.5, "Металл, стекло, камни": 7.5, "Отсев менее 16 мм": 7.0, "Прочие": 3.5},
    },
    "Северная климатическая зона": {
        "1990": {"Бумага": 22.5, "Текстиль": 6.0, "Пищевые отходы": 32.0, "Древесина": 3.0, "Резина и кожа": 5.0, "Пластик": 3.0, "Кости": 3.0, "Металл, стекло, камни": 13.5, "Отсев менее 16 мм": 10.0, "Прочие": 2.0},
        "2001": {"Бумага": 30.5, "Текстиль": 5.0, "Пищевые отходы": 35.5, "Древесина": 3.5, "Резина и кожа": 2.5, "Пластик": 3.5, "Кости": 1.5, "Металл, стекло, камни": 11.5, "Отсев менее 16 мм": 5.0, "Прочие": 1.5},
        "2005": {"Бумага": 31.0, "Текстиль": 5.0, "Пищевые отходы": 32.5, "Древесина": 3.5, "Резина и кожа": 2.5, "Пластик": 5.5, "Кости": 1.5, "Металл, стекло, камни": 12.0, "Отсев менее 16 мм": 5.0, "Прочие": 1.5},
    }
}

# Таблица 20.4: Параметры для промышленных отходов
TABLE_20_4 = {
    "Продукты питания, напитки и табачные изделия": {"doc": 0.15, "total_c": 0.15, "fossil_c_fraction": 0.0, "dry_matter": 0.40},
    "Текстиль": {"doc": 0.24, "total_c": 0.40, "fossil_c_fraction": 0.40, "dry_matter": 0.80},
    "Древесина и древесные изделия": {"doc": 0.43, "total_c": 0.43, "fossil_c_fraction": 0.0, "dry_matter": 0.85},
    "Целлюлоза и бумага": {"doc": 0.40, "total_c": 0.41, "fossil_c_fraction": 0.02, "dry_matter": 0.90},
    "Нефтепродукты, растворители и пластик": {"doc": 0.0, "total_c": 0.80, "fossil_c_fraction": 1.0, "dry_matter": 1.0},
    "Резина": {"doc": None, "total_c": 0.56, "fossil_c_fraction": 0.30, "dry_matter": 0.84},
    "Строительство и демонтаж": {"doc": 0.04, "total_c": 0.24, "fossil_c_fraction": 0.83, "dry_matter": 1.0},
    "Другое": {"doc": 0.01, "total_c": 0.04, "fossil_c_fraction": 0.75, "dry_matter": 0.90},
}

# Таблица 20.5: MCF для захоронения отходов
TABLE_20_5 = [
    {'type': 'Управляемый - анаэробный', 'MCF': 1.0},
    {'type': 'Управляемый - полуанаэробный', 'MCF': 0.5},
    {'type': 'Неуправляемый - глубокий (> 5 м)', 'MCF': 0.8},
    {'type': 'Неуправляемый - неглубокий (< 5 м)', 'MCF': 0.4},
    {'type': 'ОРО вне категории', 'MCF': 0.6},
]

# Таблица 20.6: Коэффициент окисления (OX)
TABLE_20_6 = {
    "Управляемый, неуправляемый и ОРО вне категории": 0.0,
    "Управляемый, укрытый CH4 окисляющим материалом": 0.1,
}

# Таблица 20.7: Значения k и периодов полураспада
TABLE_20_7 = {
    "Арктическая и умеренная (Сухая)": {
        "Бумажные или текстильные отходы": {"k": 0.04, "t1/2": 17},
        "Древесные отходы или солома": {"k": 0.02, "t1/2": 35},
        "Другие органические отходы": {"k": 0.05, "t1/2": 14},
        "Пищевые отходы или отстой сточных вод": {"k": 0.06, "t1/2": 12},
        "ТКО (в целом)": {"k": 0.05, "t1/2": 14},
    },
    "Арктическая и умеренная (Влажная)": {
        "Бумажные или текстильные отходы": {"k": 0.06, "t1/2": 12},
        "Древесные отходы или солома": {"k": 0.03, "t1/2": 23},
        "Другие органические отходы": {"k": 0.1, "t1/2": 7},
        "Пищевые отходы или отстой сточных вод": {"k": 0.185, "t1/2": 4},
        "ТКО (в целом)": {"k": 0.09, "t1/2": 7},
    },
    "Тропическая (Сухая)": {
        "Бумажные или текстильные отходы": {"k": 0.045, "t1/2": 15},
        "Древесные отходы или солома": {"k": 0.025, "t1/2": 28},
        "Другие органические отходы": {"k": 0.065, "t1/2": 11},
        "Пищевые отходы или отстой сточных вод": {"k": 0.085, "t1/2": 8},
        "ТКО (в целом)": {"k": 0.065, "t1/2": 11},
    },
    "Тропическая (Влажная)": {
        "Бумажные или текстильные отходы": {"k": 0.07, "t1/2": 10},
        "Древесные отходы или солома": {"k": 0.035, "t1/2": 20},
        "Другие органические отходы": {"k": 0.17, "t1/2": 4},
        "Пищевые отходы или отстой сточных вод": {"k": 0.4, "t1/2": 2},
        "ТКО (в целом)": {"k": 0.17, "t1/2": 4},
    }
}


# Таблица 21.1: Коэффициенты для биологической переработки
TABLE_21_1 = [
    {'type': 'Компостирование', 'EF_CH4_wet': 4.0, 'EF_N2O_wet': 0.3, 'EF_CH4_dry': 10.0, 'EF_N2O_dry': 0.6},
    {'type': 'Анаэробное сбраживание', 'EF_CH4_wet': 1.0, 'EF_N2O_wet': 0.0, 'EF_CH4_dry': 2.0, 'EF_N2O_dry': 0.0}
]

# Таблица 22.1: Данные для оценки выбросов CO2 при сжигании отходов
TABLE_22_1 = {
    "Промышленные отходы": {"carbon_content_dry": 0.50, "fossil_carbon_fraction": 0.90},
    "Осадки сточных вод": {"dry_matter_wet": 0.06, "carbon_content_dry": 0.33, "fossil_carbon_fraction": 0.0},
    "Ископаемые жидкие отходы": {"carbon_content_wet": 0.80, "fossil_carbon_fraction": 1.0},
    "oxidation_factor": {"инсинерация": 1.0, "открытое сжигание": 0.58}
}

# Таблица 22.2: Коэффициенты выбросов N2O при сжигании отходов
TABLE_22_2 = [
    {"category": "ТКО", "technology": "печи постоянного и полупостоянного режима", "EF_N2O": 50, "unit": "влажный вес"},
    {"category": "ТКО", "technology": "печи периодического действия", "EF_N2O": 60, "unit": "влажный вес"},
    {"category": "ТКО", "technology": "открытое сжигание", "EF_N2O": 150, "unit": "сухой вес"},
    {"category": "Промышленные отходы", "technology": "все типы инсинерации", "EF_N2O": 100, "unit": "влажный вес"},
    {"category": "Осадки сточных вод (за исключением канализационных)", "technology": "все типы инсинерации", "EF_N2O": 450, "unit": "влажный вес"},
    {"category": "Канализационные осадки", "technology": "инсинерация (сухой вес)", "EF_N2O": 990, "unit": "сухой вес"},
    {"category": "Канализационные осадки", "technology": "инсинерация (влажный вес)", "EF_N2O": 900, "unit": "влажный вес"},
]

# Таблица 23.1: MCF для бытовых сточных вод
TABLE_23_1 = {
    "Море, реки и озера": 0.1,
    "Отстойники или пруды": 0.5,
    "Проточные коллекторы": 0.0,
    "Централизованные аэробные сооружения (хорошо управляемые)": 0.0,
    "Централизованные аэробные сооружения (плохо управляемые)": 0.3,
    "Метантенк": 0.8,
    "Анаэробные реакторы": 0.8,
    "Анаэробные неглубокие отстойники (<2м)": 0.2,
    "Анаэробные глубокие отстойники (>2м)": 0.8,
    "Септические системы": 0.5,
    "Отхожее место (сухой климат, низкий УГВ, семья)": 0.1,
    "Отхожее место (сухой климат, низкий УГВ, общественное)": 0.5,
    "Отхожее место (влажный климат или высокий УГВ)": 0.7,
    "Отхожее место (регулярное удаление отстоя)": 0.1,
}

# Таблица 23.2: Данные по промышленным сточным водам (ХПК - Химическое потребление кислорода)
TABLE_23_2 = {
    "Перегонка спирта": {"wastewater_per_product": 24, "cod": 11.0},
    "Пиво и солодовые напитки": {"wastewater_per_product": 6.3, "cod": 2.9},
    "Молочная продукция": {"wastewater_per_product": 7, "cod": 2.7},
    "Рыбопереработка": {"wastewater_per_product": 13, "cod": 2.5},
    "Мясо и птица": {"wastewater_per_product": 13, "cod": 4.1},
    "Органические химические вещества": {"wastewater_per_product": 67, "cod": 3.0},
    "Нефтепереработка": {"wastewater_per_product": 0.6, "cod": 1.0},
    "Пластик и смола": {"wastewater_per_product": 0.6, "cod": 3.7},
    "Бумажная масса и бумага": {"wastewater_per_product": 162, "cod": 9.0},
    "Мыло и моющие средства": {"wastewater_per_product": 3, "cod": 0.8},
    "Производство крахмала": {"wastewater_per_product": 9, "cod": 10.0},
    "Рафинирование сахара": {"wastewater_per_product": 11, "cod": 3.2},
    "Растительные масла": {"wastewater_per_product": 3.1, "cod": 0.8},
    "Овощи, фрукты, соки": {"wastewater_per_product": 20, "cod": 5.0},
    "Вино и уксус": {"wastewater_per_product": 23, "cod": 1.5},
}

# Таблица 23.3: MCF для промышленных сточных вод
TABLE_23_3 = {
    "Сброс в моря, реки и озера": 0.0,
    "Аэробные очистные сооружения (хорошо управляемые)": 0.0,
    "Аэробные очистные сооружения (плохо управляемые)": 0.3,
    "Установка для анаэробного сбраживания": 0.8,
    "Анаэробный реактор": 0.8,
    "Анаэробные неглубокие отстойники": 0.2,
    "Анаэробные глубокие отстойники": 0.8,
}

# Таблица 23.4: Параметры для оценки выбросов N2O из сточных вод
TABLE_23_4 = {
    "FNPR": 0.16,  # кг N/кг протеина
    "F_NON_CON": 1.2, # коэффициент для непотребленного протеина
    "F_IND_COM": 1.25, # коэффициент для промышленного и коммерческого протеина
    "EF_effluent": 0.05, # кг N2O-N/кг N
}


# Списки для выпадающих меню в UI, для удобства
METALLURGY_RAW_MATERIALS = [
    'Железорудные окатыши', 'Агломерат', 'Известняк', 'Доломит',
    'Кокс металлургический', 'Коксующийся уголь', 'Чугун, чугунный лом',
    'Сталь, стальной лом', 'Электроды для электродуговых печей',
    'Углеродсодержащие материалы для сталеплавильных печей'
]

METALLURGY_PRODUCTS = [
    'Железо прямого восстановления', 'Железо горячего брикетирования',
    'Чугун, чугунный лом', 'Сталь, стальной лом',
    'Газ горючий искусственный доменный'
]

FERROALLOY_RAW_MATERIALS = [
    'Кокс металлургический', 'Антрацит', 'Каменный уголь',
    'Электроды для электродуговых печей'
]

# Примечание: В методике нет точного списка продукции, добавляем основные
FERROALLOY_PRODUCTS = [
    'Феррохром', 'Ферросилиций', 'Ферромарганец', 'Силикомарганец'
]


class DataService:
    """
    Класс-сервис для предоставления централизованного доступа ко всем табличным данным.
    """
    def __init__(self):
        self.table_1_1 = TABLE_1_1
        self.table_1_2 = TABLE_1_2
        self.table_2_1 = TABLE_2_1
        self.table_2_2 = TABLE_2_2
        self.table_3_1 = TABLE_3_1
        self.table_6_1 = TABLE_6_1
        self.table_6_2 = TABLE_6_2
        self.table_8_1 = TABLE_8_1
        self.table_11_1 = TABLE_11_1
        self.table_12_1 = TABLE_12_1
        self.table_14_1 = TABLE_14_1
        self.table_16_1 = TABLE_16_1
        self.table_18_1 = TABLE_18_1
        self.table_19_1 = TABLE_19_1
        self.table_20_2 = TABLE_20_2
        self.table_20_3 = TABLE_20_3
        self.table_20_4 = TABLE_20_4
        self.table_20_5 = TABLE_20_5
        self.table_20_6 = TABLE_20_6
        self.table_20_7 = TABLE_20_7
        self.table_21_1 = TABLE_21_1
        self.table_22_1 = TABLE_22_1
        self.table_22_2 = TABLE_22_2
        self.table_23_1 = TABLE_23_1
        self.table_23_2 = TABLE_23_2
        self.table_23_3 = TABLE_23_3
        self.table_23_4 = TABLE_23_4

    # Методы для получения данных из таблиц (геттеры)
    def get_fuels_table_1_1(self):
        return list(self.table_1_1.keys())

    def get_fuel_data_table_1_1(self, fuel_name):
        return self.table_1_1.get(fuel_name)

    def get_density_data_table_1_2(self, conditions_index=2): # По умолчанию 20°C
        return self.table_1_2[conditions_index]

    def get_flare_gas_types_table_2_1(self):
        return [item['type'] for item in self.table_2_1]
        
    def get_flare_gas_data_table_2_1(self, gas_type):
        for item in self.table_2_1:
            if item['type'] == gas_type:
                return item
        return None

    def get_fugitive_gas_types_table_3_1(self):
        return [item['type'] for item in self.table_3_1]

    def get_fugitive_gas_data_table_3_1(self, gas_type):
        for item in self.table_3_1:
            if item['type'] == gas_type:
                return item
        return None

    def get_carbonate_formulas_table_6_1(self):
        return [item['formula'] for item in self.table_6_1]

    def get_carbonate_data_table_6_1(self, formula):
        for item in self.table_6_1:
            if item['formula'] == formula:
                return item
        return None
        
    def get_oxide_formulas_table_6_2(self):
        return [item['formula'] for item in self.table_6_2]

    def get_oxide_data_table_6_2(self, formula):
        for item in self.table_6_2:
            if item['formula'] == formula:
                return item
        return None

    def get_glass_carbonate_formulas_table_8_1(self):
        return [item['formula'] for item in self.table_8_1]

    def get_glass_carbonate_data_table_8_1(self, formula):
        for item in self.table_8_1:
            if item['formula'] == formula:
                return item
        return None
        
    def get_chemical_processes_table_11_1(self):
        return [item['process'] for item in self.table_11_1]

    def get_chemical_process_data_table_11_1(self, process_name):
        for item in self.table_11_1:
            if item['process'] == process_name:
                return item
        return None
        
    def get_petrochemical_substance_names_12_1(self):
        return [item['substance'] for item in self.table_12_1]

    def get_petrochemical_substance_data_table_12_1(self, substance_name):
        for item in self.table_12_1:
            if item['substance'] == substance_name:
                return item
        return None

    def get_metallurgy_material_names_table_14_1(self):
        return [item['material'] for item in self.table_14_1]

    def get_metallurgy_material_data_table_14_1(self, material_name):
        for item in self.table_14_1:
            if item['material'] == material_name:
                return item
        return None
        
    def get_aluminium_tech_types_16_1(self):
        return [item['technology'] for item in self.table_16_1]
        
    def get_aluminium_tech_data_table_16_1(self, technology):
        for item in self.table_16_1:
            if item['technology'] == technology:
                return item
        return None

    def get_transport_fuel_names_18_1(self):
        return [item['fuel'] for item in self.table_18_1]

    def get_transport_fuel_data_table_18_1(self, fuel_name):
        for item in self.table_18_1:
            if item['fuel'] == fuel_name:
                return item
        return None

    def get_road_types_table_19_1(self):
        return list(self.table_19_1.keys())

    def get_road_stages_table_19_1(self):
        # Этапы одинаковы для всех типов дорог
        return list(self.table_19_1["Автомобильные дороги федерального значения"].keys())

    def get_road_work_data_table_19_1(self, road_type, stage, category):
        try:
            ef = self.table_19_1[road_type][stage][category]
            return {'EF': ef}
        except KeyError:
            return None
            
    def get_biological_treatment_types_table_21_1(self):
        return [item['type'] for item in self.table_21_1]

    def get_biological_treatment_data_table_21_1(self, treatment_type):
        for item in self.table_21_1:
            if item['type'] == treatment_type:
                return item
        return None
    
    def get_waste_component_types_20_2(self):
        return list(self.table_20_2.keys())

    def get_metallurgy_raw_materials(self):
        return METALLURGY_RAW_MATERIALS

    def get_metallurgy_products(self):
        return METALLURGY_PRODUCTS
        
    def get_ferroalloy_raw_materials(self):
        return FERROALLOY_RAW_MATERIALS

    def get_ferroalloy_products(self):
        return FERROALLOY_PRODUCTS

@dataclass
class RegionalForestData:
    """Данные по лесам для субъектов РФ."""
    region: str
    # Покрытые лесом земли
    above_biomass: float  # Надземная биомасса, т C/га
    below_biomass: float  # Подземная биомасса, т C/га
    deadwood: float  # Мертвое органическое вещество, т C/га
    litter: float  # Подстилка, т C/га
    soil: float  # Почва, т C/га
    # Кустарниковая растительность
    shrub_above: float  # Надземная биомасса кустарников, т C/га
    shrub_below: float  # Подземная биомасса кустарников, т C/га
    shrub_deadwood: float  # Мертвое органическое вещество, т C/га
    shrub_litter: float  # Подстилка, т C/га
    shrub_soil: float  # Почва под кустарниками, т C/га


class ExtendedDataService:
    """Расширенный сервис данных с таблицами для поглощения ПГ."""
    
    def __init__(self):
        self._init_forest_coefficients()
        self._init_regional_data()
        self._init_emission_factors()
        self._init_agricultural_data()
        
    def _init_forest_coefficients(self):
        """Инициализация коэффициентов для лесных расчетов."""
        
        # Таблица 24: Коэффициенты аллометрических уравнений
        self.allometric_coefficients = {
            'ель': {
                'надземная': {'a': 0.0533, 'b': 0.8955},
                'корни': {'a': 0.0239, 'b': 0.8408},
                'всего': {'a': 0.1237, 'b': 0.8332}
            },
            'сосна': {
                'надземная': {'a': 0.0217, 'b': 0.9817},
                'корни': {'a': 0.0387, 'b': 0.7281},
                'всего': {'a': 0.0557, 'b': 0.9031}
            },
            'береза': {
                'надземная': {'a': 0.5443, 'b': 0.6527},
                'корни': {'a': 0.0387, 'b': 0.7281},
                'всего': {'a': 0.0557, 'b': 0.9031}
            }
        }
        
        # Таблица 24.2: Коэффициенты выбросов при пожарах
        self.fire_emission_factors = {
            'леса': {
                'CO2': 1569.0,  # г/кг сжигаемого вещества
                'CH4': 4.7,
                'N2O': 0.26
            },
            'сельхоз_остатки': {
                'CO2': 1515.0,
                'CH4': 2.7,
                'N2O': 0.07
            },
            'кормовые_угодья': {
                'CO2': 1613.0,
                'CH4': 2.3,
                'N2O': 0.21
            }
        }
        
        # Таблица 25.6: Масса доступного топлива для пожаров
        self.fuel_mass_forest = {
            'покрытые_лесом': {
                'биомасса': 87.9,
                'мертвая_древесина': 17.4,
                'подстилка': 16.1,
                'всего': 121.4
            },
            'непокрытые_лесом': {
                'биомасса': 10.4,
                'мертвая_древесина': 1.1,
                'подстилка': 10.9,
                'всего': 22.4
            }
        }
        
    def _init_regional_data(self):
        """Инициализация региональных данных по субъектам РФ."""
        
        # Таблица 27.8: Средние величины запасов углерода по регионам
        self.regional_carbon_stocks = {
            'Республика Адыгея': RegionalForestData(
                region='Республика Адыгея',
                above_biomass=74.02, below_biomass=20.86, deadwood=14.35,
                litter=5.51, soil=54.08, shrub_above=0.0, shrub_below=0.0,
                shrub_deadwood=0.0, shrub_litter=0.0, shrub_soil=49.84
            ),
            'Республика Алтай': RegionalForestData(
                region='Республика Алтай',
                above_biomass=55.08, below_biomass=16.05, deadwood=10.94,
                litter=5.06, soil=100.53, shrub_above=1.94, shrub_below=0.52,
                shrub_deadwood=0.09, shrub_litter=6.66, shrub_soil=96.54
            ),
            'Республика Башкортостан': RegionalForestData(
                region='Республика Башкортостан',
                above_biomass=43.87, below_biomass=11.03, deadwood=10.02,
                litter=6.56, soil=69.49, shrub_above=5.10, shrub_below=1.36,
                shrub_deadwood=0.31, shrub_litter=6.68, shrub_soil=65.26
            ),
            'Республика Бурятия': RegionalForestData(
                region='Республика Бурятия',
                above_biomass=37.09, below_biomass=7.33, deadwood=9.73,
                litter=6.47, soil=93.24, shrub_above=7.27, shrub_below=11.07,
                shrub_deadwood=4.05, shrub_litter=3.92, shrub_soil=88.75
            ),
            # Добавить остальные регионы...
        }
        
        # Таблица 27.3: Продуктивность сенокосов и пастбищ по регионам
        self.grassland_productivity = {
            'Республика Адыгея': {'productivity': 5.0, 'carbon_accumulation': 3660},
            'Республика Алтай': {'productivity': 2.5, 'carbon_accumulation': 1830},
            'Республика Башкортостан': {'productivity': 4.0, 'carbon_accumulation': 2928},
            'Республика Бурятия': {'productivity': 3.0, 'carbon_accumulation': 2196},
            'Республика Дагестан': {'productivity': 4.5, 'carbon_accumulation': 3294},
            # Добавить остальные регионы...
        }
        
    def _init_emission_factors(self):
        """Инициализация коэффициентов выбросов."""
        
        # Коэффициенты выбросов от осушенных почв
        self.drained_soil_factors = {
            'лесные_земли': {
                'CO2': 0.71,  # т C/га/год
                'N2O': 1.71,  # кг N/га/год
                'CH4_frac_ditch': 0.025,
                'CH4_ef_land': 4.5,  # кг CH4/га/год
                'CH4_ef_ditch': 217  # кг CH4/га/год
            },
            'пахотные_земли': {
                'CO2': 5.9,  # т C/га/год
                'N2O': 7.0,  # кг N-N2O/га/год
                'CH4_frac_ditch': 0.5,
                'CH4_ef_land': 0.0,
                'CH4_ef_ditch': 1165
            },
            'кормовые_угодья': {
                'CO2': 5.82,  # т C/га/год
                'N2O': 9.5,  # кг N-N2O/га/год
                'CH4_frac_ditch': 0.05,
                'CH4_ef_land': 1.4,
                'CH4_ef_ditch': 43.63
            }
        }
        
    def _init_agricultural_data(self):
        """Инициализация данных для сельскохозяйственных расчетов."""
        
        # Таблица 26.1: Содержание углерода в органических удобрениях
        self.organic_fertilizer_carbon = {
            'навоз': 8.07,  # % сырого вещества
            'навоз_подстилочный': 12.07,
            'навоз_бесподстилочный': 4.08,
            'торф': 23.56,
            'помет': 19.11,
            'солома_сидераты': 22.23
        }
        
        # Таблица 26.2: Коэффициенты углерода в минеральных удобрениях
        self.mineral_fertilizer_carbon = {
            'азотные': 0.13,
            'фосфорные': 0.015,
            'калийные': 0.017
        }
        
        # Таблица 26.3: Уравнения для расчета углерода растительных остатков
        self.crop_residue_equations = {
            'озимая_рожь': {
                '10-25': {'above': (0.3, 3.2), 'below': (0.6, 8.9), 'carbon': 0.45},
                '26-40': {'above': (0.2, 6.3), 'below': (0.6, 13.9), 'carbon': 0.45}
            },
            'озимая_пшеница': {
                '10-25': {'above': (0.4, 2.6), 'below': (0.9, 5.8), 'carbon': 0.4853},
                '26-40': {'above': (0.1, 8.9), 'below': (0.7, 10.0), 'carbon': 0.4853}
            },
            'яровая_пшеница': {
                '10-20': {'above': (0.4, 1.8), 'below': (0.7, 10.2), 'carbon': 0.4853},
                '21-30': {'above': (0.2, 5.4), 'below': (0.8, 6.0), 'carbon': 0.4853}
            },
            'ячмень': {
                '10-20': {'above': (0.4, 1.8), 'below': (0.8, 6.5), 'carbon': 0.4567},
                '21-35': {'above': (0.09, 7.6), 'below': (0.4, 13.45), 'carbon': 0.4567}
            },
            # Добавить остальные культуры...
        }
        
        # Таблица 27.1: Коэффициенты для оценки поступления углерода с навозом
        self.livestock_carbon_factors = {
            'коровы': {
                'excretion': 244.6,  # кг C/голова/год
                'ch4': 5.07,
                'co2': 3.38,
                'grazing_time': 19.2  # %
            },
            'крс_без_коров': {
                'excretion': 115.9,
                'ch4': 3.04,
                'co2': 2.02,
                'grazing_time': 24.8
            },
            'овцы': {
                'excretion': 36.9,
                'ch4': 0.19,
                'co2': 0.13,
                'grazing_time': 18.4
            },
            'козы': {
                'excretion': 23.3,
                'ch4': 0.13,
                'co2': 0.09,
                'grazing_time': 18.4
            },
            'лошади': {
                'excretion': 156.6,
                'ch4': 1.56,
                'co2': 1.04,
                'grazing_time': 18.4
            },
            # Добавить остальных животных...
        }
        
        # Таблица 27.2: Эмиссия CO2 от дыхания почв
        self.soil_respiration_rates = {
            'среднее_луговые': 445,  # мг CO2/м²/час
            'дерново_подзолистая': 200,
            'торфяная': 937,
            'мерзлотно_луговая': 600,
            'серая_лесная': 385,
            'чернозем': 280,
            'чернозем_обыкновенный': 359
        }
        
    def get_allometric_coefficients(
        self,
        species: str,
        fraction: str = 'всего'
    ) -> Optional[Dict[str, float]]:
        """Получить коэффициенты аллометрических уравнений."""
        species_data = self.allometric_coefficients.get(species.lower())
        if species_data:
            return species_data.get(fraction)
        return None
    
    def get_fire_emission_factor(
        self,
        land_type: str,
        gas_type: str
    ) -> Optional[float]:
        """Получить коэффициент выбросов при пожарах."""
        land_data = self.fire_emission_factors.get(land_type)
        if land_data:
            return land_data.get(gas_type)
        return None
    
    def get_regional_carbon_stocks(
        self,
        region: str
    ) -> Optional[RegionalForestData]:
        """Получить данные по запасам углерода для региона."""
        return self.regional_carbon_stocks.get(region)
    
    def get_drained_soil_factors(
        self,
        land_type: str
    ) -> Optional[Dict[str, float]]:
        """Получить коэффициенты выбросов от осушенных почв."""
        return self.drained_soil_factors.get(land_type)
    
    def get_organic_fertilizer_carbon(
        self,
        fertilizer_type: str
    ) -> Optional[float]:
        """Получить содержание углерода в органическом удобрении."""
        return self.organic_fertilizer_carbon.get(fertilizer_type)
    
    def get_crop_residue_coefficients(
        self,
        crop: str,
        yield_range: str
    ) -> Optional[Dict]:
        """Получить коэффициенты для расчета углерода растительных остатков."""
        crop_data = self.crop_residue_equations.get(crop)
        if crop_data:
            return crop_data.get(yield_range)
        return None
    
    def get_livestock_carbon_factors(
        self,
        animal_type: str
    ) -> Optional[Dict[str, float]]:
        """Получить коэффициенты углерода для животных."""
        return self.livestock_carbon_factors.get(animal_type)
    
    def get_soil_respiration_rate(
        self,
        soil_type: str = 'среднее_луговые'
    ) -> float:
        """Получить скорость дыхания почвы."""
        return self.soil_respiration_rates.get(soil_type, 445)
    
    def get_grassland_productivity(
        self,
        region: str
    ) -> Optional[Dict[str, float]]:
        """Получить продуктивность кормовых угодий по региону."""
        return self.grassland_productivity.get(region)