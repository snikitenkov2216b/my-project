# ui/category_1_tab.py - –í–∏–¥–∂–µ—Ç –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ –ø–æ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ 1.
# –ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø—Ä–∏–µ–º–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞, –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏, –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ UTF-8.

import logging
from PyQt6.QtWidgets import (
    QWidget,
    QVBoxLayout,
    QFormLayout,
    QComboBox,
    QLineEdit,
    QPushButton,
    QLabel,
    QMessageBox,
    QStackedWidget,
    QHBoxLayout,
    QGroupBox,
)
from PyQt6.QtGui import QDoubleValidator
from PyQt6.QtCore import Qt, QLocale

from calculations.category_1 import Category1Calculator
from config import OXIDATION_FACTOR_SOLID, OXIDATION_FACTOR_LIQUID, OXIDATION_FACTOR_GAS

from ui.helpers import (
    SectionHeader, InfoBox, ResultDisplayWidget, 
    HorizontalLine, create_tooltip_style
)

class Category1Tab(QWidget):
    """
    –ö–ª–∞—Å—Å –≤–∏–¥–∂–µ—Ç–∞-–≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ 1 "–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–µ —Å–∂–∏–≥–∞–Ω–∏–µ —Ç–æ–ø–ª–∏–≤–∞".
    """

    def __init__(self, calculator: Category1Calculator, parent=None):
        super().__init__(parent)
        self.calculator = calculator
        self.c_locale = QLocale(QLocale.Language.English, QLocale.Country.UnitedStates)

        self.gas_volume_rows = []
        self.gas_mass_rows = []

        self._init_ui()

    def _init_ui(self):
        main_layout = QVBoxLayout(self)
        main_layout.setAlignment(Qt.AlignmentFlag.AlignTop)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
        self.setStyleSheet(create_tooltip_style())
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫
        info_box = InfoBox(
            "‚ÑπÔ∏è –û –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", 
            "–†–∞—Å—á–µ—Ç –≤—ã–±—Ä–æ—Å–æ–≤ CO‚ÇÇ –æ—Ç —Å–∂–∏–≥–∞–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞ –≤ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–∫–∞—Ö "
            "(–∫–æ—Ç–ª—ã, –ø–µ—á–∏, –¢–≠–° –∏ –¥—Ä.). –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ö–æ–¥–µ —Ç–æ–ø–ª–∏–≤–∞, "
            "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤—ã–±—Ä–æ—Å–æ–≤ –∏ —Å—Ç–µ–ø–µ–Ω—å –æ–∫–∏—Å–ª–µ–Ω–∏—è."
        )
        main_layout.addWidget(info_box)
        
        # –°–µ–∫—Ü–∏—è: –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        main_layout.addWidget(SectionHeader("üî• –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–ø–ª–∏–≤–∞"))
        
        form_layout = QFormLayout()
        
        self.fuel_combobox = QComboBox()
        self.fuel_combobox.addItems(self.calculator.data_service.get_fuels_table_1_1())
        self.fuel_combobox.setToolTip(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–∂–∏–≥–∞–µ–º–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞.\n"
            "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—ã–±—Ä–æ—Å–æ–≤ CO‚ÇÇ."
        )
        form_layout.addRow("–í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞:", self.fuel_combobox)

        self.fuel_consumption_input = QLineEdit()
        validator_consumption = QDoubleValidator(0.0, 1e12, 6, self)
        validator_consumption.setLocale(self.c_locale)
        self.fuel_consumption_input.setValidator(validator_consumption)
        self.fuel_consumption_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
        self.fuel_consumption_input.setToolTip(
            "–ì–æ–¥–æ–≤–æ–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –≤ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö:\n"
            "‚Ä¢ –î–ª—è —Ç–≤–µ—Ä–¥–æ–≥–æ/–∂–∏–¥–∫–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞: —Ç–æ–Ω–Ω—ã\n"
            "‚Ä¢ –î–ª—è –≥–∞–∑–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞: —Ç—ã—Å—è—á–∏ –º¬≥"
        )
        form_layout.addRow("–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (—Ç –∏–ª–∏ —Ç—ã—Å. –º¬≥):", self.fuel_consumption_input)
        
        main_layout.addLayout(form_layout)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        main_layout.addWidget(HorizontalLine())
        
        # –°–µ–∫—Ü–∏—è: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–±—Ä–æ—Å–æ–≤
        main_layout.addWidget(SectionHeader("üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–±—Ä–æ—Å–æ–≤ (EF)"))

        ef_group = QGroupBox("–ú–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è EF")
        ef_layout = QVBoxLayout(ef_group)

        self.ef_method_combobox = QComboBox()
        self.ef_method_combobox.addItems(
            [
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π EF (–∏–∑ –¢–∞–±–ª–∏—Ü—ã 1.1)",
                "–†–∞—Å—á–µ—Ç EF –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é —É–≥–ª–µ—Ä–æ–¥–∞ (–§–æ—Ä–º—É–ª–∞ 1.5)",
                "–†–∞—Å—á–µ—Ç EF –ø–æ –æ–±—ä–µ–º–Ω–æ–º—É —Å–æ—Å—Ç–∞–≤—É –≥–∞–∑–∞ (–§–æ—Ä–º—É–ª–∞ 1.3)",
                "–†–∞—Å—á–µ—Ç EF –ø–æ –º–∞—Å—Å–æ–≤–æ–º—É —Å–æ—Å—Ç–∞–≤—É –≥–∞–∑–∞ (–§–æ—Ä–º—É–ª–∞ 1.4)",
            ]
        )
        self.ef_method_combobox.setToolTip(
            "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–æ—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ (—Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π).\n"
            "–î—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã: –ø–æ–∑–≤–æ–ª—è—é—Ç —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å EF –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–∞–≤–∞ —Ç–æ–ø–ª–∏–≤–∞ (–¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏)."
        )
        ef_layout.addWidget(self.ef_method_combobox)

        self.ef_stacked_widget = QStackedWidget()
        self.ef_stacked_widget.addWidget(self._create_standard_ef_widget())
        self.ef_stacked_widget.addWidget(self._create_carbon_content_widget())
        self.ef_stacked_widget.addWidget(self._create_gas_composition_volume_widget())
        self.ef_stacked_widget.addWidget(self._create_gas_composition_mass_widget())
        ef_layout.addWidget(self.ef_stacked_widget)

        self.ef_method_combobox.currentIndexChanged.connect(
            self.ef_stacked_widget.setCurrentIndex
        )
        main_layout.addWidget(ef_group)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        main_layout.addWidget(HorizontalLine())
        
        # –°–µ–∫—Ü–∏—è: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–∫–∏—Å–ª–µ–Ω–∏—è
        main_layout.addWidget(SectionHeader("‚öôÔ∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–∫–∏—Å–ª–µ–Ω–∏—è (OF)"))
        
        of_layout = QFormLayout()
        self.oxidation_factor_input = QLineEdit()
        validator_of = QDoubleValidator(0.0, 1.0, 4, self)
        validator_of.setLocale(self.c_locale)
        self.oxidation_factor_input.setValidator(validator_of)
        self.oxidation_factor_input.setPlaceholderText("0.98")
        self.oxidation_factor_input.setToolTip(
            "–î–æ–ª—è —É–≥–ª–µ—Ä–æ–¥–∞, –æ–∫–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –¥–æ CO‚ÇÇ (–æ—Ç 0 –¥–æ 1).\n\n"
            "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
            "‚Ä¢ –ì–∞–∑–æ–æ–±—Ä–∞–∑–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ: 0.995\n"
            "‚Ä¢ –ñ–∏–¥–∫–æ–µ —Ç–æ–ø–ª–∏–≤–æ: 0.99\n"
            "‚Ä¢ –¢–≤–µ—Ä–¥–æ–µ —Ç–æ–ø–ª–∏–≤–æ: 0.98"
        )
        of_layout.addRow("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–∫–∏—Å–ª–µ–Ω–∏—è (OF):", self.oxidation_factor_input)
        main_layout.addLayout(of_layout)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        main_layout.addWidget(HorizontalLine())

        # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
        self.calculate_button = QPushButton("üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—ã–±—Ä–æ—Å—ã CO‚ÇÇ")
        self.calculate_button.setStyleSheet("""
            QPushButton {
                background-color: #1976D2;
                color: white;
                padding: 12px;
                font-size: 13px;
                font-weight: bold;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #1565C0;
            }
            QPushButton:pressed {
                background-color: #0D47A1;
            }
        """)
        self.calculate_button.clicked.connect(self._perform_calculation)
        main_layout.addWidget(self.calculate_button)

        # –í–∏–¥–∂–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.result_widget = ResultDisplayWidget()
        main_layout.addWidget(self.result_widget)

    def _update_oxidation_factor(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–∫–∏—Å–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞."""
        fuel_name = self.fuel_combobox.currentText()
        fuel_data = self.calculator.data_service.get_fuel_data_table_1_1(fuel_name)
        if not fuel_data:
            return

        unit = fuel_data.get("unit", "")
        if "—Ç—ã—Å. –º3" in unit:
            self.oxidation_factor_input.setText(str(OXIDATION_FACTOR_GAS))
        elif any(
            solid in fuel_name.lower()
            for solid in ["—É–≥–æ–ª—å", "–∫–æ–∫—Å", "—Ç–æ—Ä—Ñ", "–∞–Ω—Ç—Ä–∞—Ü–∏—Ç", "—Å–ª–∞–Ω—Ü—ã", "–±—Ä–∏–∫–µ—Ç—ã"]
        ):
            self.oxidation_factor_input.setText(str(OXIDATION_FACTOR_SOLID))
        else:
            self.oxidation_factor_input.setText(str(OXIDATION_FACTOR_LIQUID))

    def _create_ef_from_carbon_widget(self):
        widget = QWidget()
        layout = QFormLayout(widget)
        self.carbon_content_input = QLineEdit()
        validator = QDoubleValidator(0.0, 1.0, 6, self)
        validator.setLocale(self.c_locale)
        self.carbon_content_input.setValidator(validator)
        self.carbon_content_input.setToolTip(
            "–ú–∞—Å—Å–æ–≤–∞—è –¥–æ–ª—è —É–≥–ª–µ—Ä–æ–¥–∞ –≤ —Ç–æ–ø–ª–∏–≤–µ (—Ç C/—Ç)."
        )
        layout.addRow(
            "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É–≥–ª–µ—Ä–æ–¥–∞ –≤ —Ç–æ–ø–ª–∏–≤–µ (–¥–æ–ª—è):", self.carbon_content_input
        )
        return widget

    def _create_ef_from_gas_volume_widget(self):
        widget = QWidget()
        layout = QVBoxLayout(widget)
        form = QFormLayout()
        self.rho_co2_input = QLineEdit(
            str(self.calculator.data_service.get_density_data_table_1_2()["rho_CO2"])
        )
        validator = QDoubleValidator(0.0, 1e9, 6, self)
        validator.setLocale(self.c_locale)
        self.rho_co2_input.setValidator(validator)
        self.rho_co2_input.setToolTip(
            "–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –¥–∏–æ–∫—Å–∏–¥–∞ —É–≥–ª–µ—Ä–æ–¥–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö (20 ¬∞C)."
        )
        form.addRow("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å CO‚ÇÇ, –∫–≥/–º¬≥:", self.rho_co2_input)
        layout.addLayout(form)

        group_box = QGroupBox("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–∞–∑–∞ (–æ–±—ä–µ–º–Ω—ã–µ –¥–æ–ª–∏)")
        self.gas_volume_layout = QVBoxLayout(group_box)
        layout.addWidget(group_box)
        add_button = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç")
        add_button.clicked.connect(self._add_gas_volume_row)
        layout.addWidget(add_button)
        return widget

    def _create_ef_from_gas_mass_widget(self):
        widget = QWidget()
        layout = QVBoxLayout(widget)
        form = QFormLayout()
        self.fuel_density_input = QLineEdit()
        validator = QDoubleValidator(0.0, 1e9, 6, self)
        validator.setLocale(self.c_locale)
        self.fuel_density_input.setValidator(validator)
        self.fuel_density_input.setToolTip(
            "–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≥–∞–∑–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö."
        )
        form.addRow("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–∞, –∫–≥/–º¬≥:", self.fuel_density_input)
        layout.addLayout(form)

        group_box = QGroupBox("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–∞–∑–∞ (–º–∞—Å—Å–æ–≤—ã–µ –¥–æ–ª–∏)")
        self.gas_mass_layout = QVBoxLayout(group_box)
        layout.addWidget(group_box)
        add_button = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç")
        add_button.clicked.connect(self._add_gas_mass_row)
        layout.addWidget(add_button)
        return widget

    def _add_gas_volume_row(self):
        row = {"widget": QWidget()}
        layout = QHBoxLayout(row["widget"])
        row["fraction"] = QLineEdit(placeholderText="–î–æ–ª—è, %")
        row["fraction"].setToolTip("–û–±—ä–µ–º–Ω–∞—è –¥–æ–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ —Å–º–µ—Å–∏.")
        row["carbon_atoms"] = QLineEdit(placeholderText="–ê—Ç–æ–º–æ–≤ C")
        row["carbon_atoms"].setToolTip("–ß–∏—Å–ª–æ –∞—Ç–æ–º–æ–≤ —É–≥–ª–µ—Ä–æ–¥–∞ –≤ –º–æ–ª–µ–∫—É–ª–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.")
        remove_button = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        layout.addWidget(row["fraction"])
        layout.addWidget(row["carbon_atoms"])
        layout.addWidget(remove_button)
        self.gas_volume_rows.append(row)
        self.gas_volume_layout.addWidget(row["widget"])
        remove_button.clicked.connect(
            lambda: self._remove_row(row, self.gas_volume_layout, self.gas_volume_rows)
        )

    def _add_gas_mass_row(self):
        row = {"widget": QWidget()}
        layout = QHBoxLayout(row["widget"])
        row["fraction"] = QLineEdit(placeholderText="–î–æ–ª—è, %")
        row["fraction"].setToolTip("–ú–∞—Å—Å–æ–≤–∞—è –¥–æ–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ —Å–º–µ—Å–∏.")
        row["carbon_atoms"] = QLineEdit(placeholderText="–ê—Ç–æ–º–æ–≤ C")
        row["carbon_atoms"].setToolTip("–ß–∏—Å–ª–æ –∞—Ç–æ–º–æ–≤ —É–≥–ª–µ—Ä–æ–¥–∞ –≤ –º–æ–ª–µ–∫—É–ª–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.")
        row["molar_mass"] = QLineEdit(placeholderText="–ú–æ–ª—è—Ä–Ω–∞—è –º–∞—Å—Å–∞")
        row["molar_mass"].setToolTip("–ú–æ–ª—è—Ä–Ω–∞—è –º–∞—Å—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –≥/–º–æ–ª—å.")
        remove_button = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        layout.addWidget(row["fraction"])
        layout.addWidget(row["carbon_atoms"])
        layout.addWidget(row["molar_mass"])
        layout.addWidget(remove_button)
        self.gas_mass_rows.append(row)
        self.gas_mass_layout.addWidget(row["widget"])
        remove_button.clicked.connect(
            lambda: self._remove_row(row, self.gas_mass_layout, self.gas_mass_rows)
        )

    def _remove_row(self, row, layout, storage):
        row["widget"].deleteLater()
        layout.removeWidget(row["widget"])
        storage.remove(row)

    def _get_float(self, line_edit, field_name):
        text = line_edit.text().replace(",", ".")
        if not text:
            raise ValueError(f"–ü–æ–ª–µ '{field_name}' –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.")
        return float(text)

    def _perform_calculation(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—á–µ—Ç –≤—ã–±—Ä–æ—Å–æ–≤ CO2 —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        try:
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.result_widget.clear()
            
            fuel_name = self.fuel_combobox.currentText()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞
            fuel_consumption_str = self.fuel_consumption_input.text().replace(',', '.')
            if not fuel_consumption_str:
                self.result_widget.set_error("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
                return
            
            try:
                fuel_consumption = float(fuel_consumption_str)
            except ValueError:
                self.result_widget.set_error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞")
                return
            
            if fuel_consumption <= 0:
                self.result_widget.set_error("–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–∫–∏—Å–ª–µ–Ω–∏—è
            oxidation_factor_str = self.oxidation_factor_input.text().replace(',', '.')
            if oxidation_factor_str:
                try:
                    oxidation_factor = float(oxidation_factor_str)
                    if not (0 < oxidation_factor <= 1):
                        self.result_widget.set_error("OF –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 1")
                        return
                except ValueError:
                    self.result_widget.set_error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –æ–∫–∏—Å–ª–µ–Ω–∏—è")
                    return
            else:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä OF –ø–æ —Ç–∏–ø—É —Ç–æ–ø–ª–∏–≤–∞
                fuel_data = self.calculator.data_service.get_fuel_data_table_1_1(fuel_name)
                unit = fuel_data.get('unit', '—Ç–æ–Ω–Ω–∞')
                if '–º3' in unit:
                    oxidation_factor = OXIDATION_FACTOR_GAS
                elif '—Ç–æ–Ω–Ω–∞' in unit:
                    oxidation_factor = OXIDATION_FACTOR_SOLID
                else:
                    oxidation_factor = OXIDATION_FACTOR_LIQUID
                
                logging.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω OF = {oxidation_factor} –¥–ª—è —Ç–æ–ø–ª–∏–≤–∞ '{fuel_name}'")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ EF
            ef_method_index = self.ef_method_combobox.currentIndex()

            if ef_method_index == 0:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π EF
                fuel_data = self.calculator.data_service.get_fuel_data_table_1_1(fuel_name)
                if not fuel_data:
                    self.result_widget.set_error(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–ø–ª–∏–≤–∞ '{fuel_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return
                
                ef_co2 = fuel_data.get('EF_CO2_ut')
                if ef_co2 is None:
                    self.result_widget.set_error(f"EF_CO2 –¥–ª—è '{fuel_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ")
                    return

            elif ef_method_index == 1:
                # –†–∞—Å—á–µ—Ç EF –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é —É–≥–ª–µ—Ä–æ–¥–∞
                carbon_content_str = self.carbon_content_input.text().replace(',', '.')
                if not carbon_content_str:
                    self.result_widget.set_error("–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É–≥–ª–µ—Ä–æ–¥–∞")
                    return
                
                try:
                    carbon_content = float(carbon_content_str)
                    if not (0 <= carbon_content <= 1):
                        self.result_widget.set_error("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É–≥–ª–µ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 1")
                        return
                except ValueError:
                    self.result_widget.set_error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —É–≥–ª–µ—Ä–æ–¥–∞")
                    return
                
                ef_co2 = self.calculator.calculate_ef_from_carbon_content(carbon_content)

            elif ef_method_index == 2:
                # –†–∞—Å—á–µ—Ç EF –ø–æ –æ–±—ä–µ–º–Ω–æ–º—É —Å–æ—Å—Ç–∞–≤—É –≥–∞–∑–∞
                if not self.gas_volume_rows:
                    self.result_widget.set_error("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–∞–∑–∞")
                    return
                
                components = []
                for row in self.gas_volume_rows:
                    try:
                        volume_fraction = float(row['volume_fraction'].text().replace(',', '.'))
                        carbon_atoms = int(row['carbon_atoms'].text())
                        components.append({
                            'volume_fraction': volume_fraction,
                            'carbon_atoms': carbon_atoms
                        })
                    except ValueError:
                        self.result_widget.set_error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≥–∞–∑–∞")
                        return
                
                rho_co2 = self.calculator.data_service.get_density_data_table_1_2()['rho_CO2']
                ef_co2 = self.calculator.calculate_ef_from_gas_composition_volume(
                    components, rho_co2
                )

            elif ef_method_index == 3:
                # –†–∞—Å—á–µ—Ç EF –ø–æ –º–∞—Å—Å–æ–≤–æ–º—É —Å–æ—Å—Ç–∞–≤—É –≥–∞–∑–∞
                if not self.gas_mass_rows:
                    self.result_widget.set_error("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–∞–∑–∞")
                    return
                
                components = []
                for row in self.gas_mass_rows:
                    try:
                        mass_fraction = float(row['mass_fraction'].text().replace(',', '.'))
                        carbon_atoms = int(row['carbon_atoms'].text())
                        molar_mass = float(row['molar_mass'].text().replace(',', '.'))
                        components.append({
                            'mass_fraction': mass_fraction,
                            'carbon_atoms': carbon_atoms,
                            'molar_mass': molar_mass
                        })
                    except ValueError:
                        self.result_widget.set_error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≥–∞–∑–∞")
                        return
                
                fuel_density_str = self.fuel_density_input.text().replace(',', '.')
                if not fuel_density_str:
                    self.result_widget.set_error("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–∞")
                    return
                
                try:
                    fuel_density = float(fuel_density_str)
                except ValueError:
                    self.result_widget.set_error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏")
                    return
                
                ef_co2 = self.calculator.calculate_ef_from_gas_composition_mass(
                    components, fuel_density
                )

            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—ã–±—Ä–æ—Å–æ–≤
            total_emissions = self.calculator.calculate_total_emissions(
                fuel_consumption, ef_co2, oxidation_factor
            )

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.result_widget.set_result(total_emissions, "—Ç CO‚ÇÇ")
            
            logging.info(
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è 1 - –†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: –¢–æ–ø–ª–∏–≤–æ='{fuel_name}', "
                f"–†–∞—Å—Ö–æ–¥={fuel_consumption}, EF={ef_co2}, OF={oxidation_factor}, "
                f"–í—ã–±—Ä–æ—Å—ã={total_emissions:.2f} —Ç CO‚ÇÇ"
            )

        except ValueError as e:
            error_msg = str(e)
            self.result_widget.set_error(error_msg)
            logging.error(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è 1 - –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}"
            self.result_widget.set_error(error_msg)
            logging.error(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è 1 - –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", error_msg)
