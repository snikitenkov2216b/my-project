# ui/base_tab.py
"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ UI —Å –æ–±—â–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º.
–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞.
"""
from PyQt6.QtWidgets import QWidget, QLineEdit, QPushButton, QHBoxLayout
from PyQt6.QtGui import QDoubleValidator
from PyQt6.QtCore import QLocale


class BaseTab(QWidget):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ —Å –æ–±—â–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏."""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.c_locale = QLocale(QLocale.Language.English, QLocale.Country.UnitedStates)
        self._input_fields = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        self._named_fields = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π

    def _create_line_edit(self, validator_params=None, default_text="", tooltip="", placeholder="0.0"):
        """
        –°–æ–∑–¥–∞–µ—Ç QLineEdit —Å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º.

        Args:
            validator_params: –ö–æ—Ä—Ç–µ–∂ (min, max, decimals) –¥–ª—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
            default_text: –¢–µ–∫—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            tooltip: –í—Å–ø–ª—ã–≤–∞—é—â–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
            placeholder: –¢–µ–∫—Å—Ç-–ø–æ–¥—Å–∫–∞–∑–∫–∞ –≤ –ø—É—Å—Ç–æ–º –ø–æ–ª–µ
        """
        line_edit = QLineEdit(default_text)
        line_edit.setPlaceholderText(placeholder)

        # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
        if validator_params is None:
            validator_params = (-1e12, 1e12, 6)

        validator = QDoubleValidator(*validator_params, self)
        validator.setLocale(self.c_locale)
        validator.setNotation(QDoubleValidator.Notation.StandardNotation)
        line_edit.setValidator(validator)

        if tooltip:
            line_edit.setToolTip(tooltip)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—á–∏—Å—Ç–∫–∏
        self._input_fields.append(line_edit)
        return line_edit

    def _get_float(self, line_edit, field_name="–ø–æ–ª–µ"):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç float –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ QLineEdit.

        Args:
            line_edit: QLineEdit –≤–∏–¥–∂–µ—Ç
            field_name: –ò–º—è –ø–æ–ª—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ

        Returns:
            float: –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

        Raises:
            ValueError: –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        text = line_edit.text().replace(',', '.').strip()
        if not text:
            raise ValueError(f"–ü–æ–ª–µ '{field_name}' –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        try:
            return float(text)
        except ValueError:
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ '{field_name}': {text}")

    def _get_int(self, spin_box, field_name="–ø–æ–ª–µ"):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç int –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ QSpinBox.

        Args:
            spin_box: QSpinBox –≤–∏–¥–∂–µ—Ç
            field_name: –ò–º—è –ø–æ–ª—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ

        Returns:
            int: –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        return spin_box.value()

    def _format_result(self, **kwargs):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥.

        Args:
            **kwargs: –ü–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        """
        result = []
        for key, value in kwargs.items():
            if isinstance(value, float):
                result.append(f"{key}: {value:.3f}")
            else:
                result.append(f"{key}: {value}")
        return "\n".join(result)

    def _create_clear_button(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –ø–æ–ª–µ–π –≤–≤–æ–¥–∞.

        Returns:
            QPushButton: –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        """
        clear_button = QPushButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø–æ–ª—è")
        clear_button.setToolTip("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ –Ω–∞ —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–µ")
        clear_button.clicked.connect(self._clear_all_fields)
        clear_button.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #da190b;
            }
        """)
        return clear_button

    def _clear_all_fields(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ."""
        for field in self._input_fields:
            if isinstance(field, QLineEdit):
                field.clear()

    def _add_units_to_label(self, base_label: str, units: str) -> str:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫ –º–µ—Ç–∫–µ –ø–æ–ª—è.

        Args:
            base_label: –ë–∞–∑–æ–≤–∞—è –º–µ—Ç–∫–∞
            units: –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è

        Returns:
            str: –ú–µ—Ç–∫–∞ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        """
        return f"{base_label} ({units}):"

    def get_data(self):
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –ø–æ–ª–µ–π –≤–∫–ª–∞–¥–∫–∏.

        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–∫–ª–∞–¥–∫–∏
        """
        data = {}

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if self._named_fields:
            for name, field in self._named_fields.items():
                if isinstance(field, QLineEdit):
                    data[name] = field.text()
        else:
            # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –ø–æ–ª—è –ø–æ –∏–Ω–¥–µ–∫—Å—É
            for i, field in enumerate(self._input_fields):
                if isinstance(field, QLineEdit):
                    data[f'field_{i}'] = field.text()

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
        result = None
        if hasattr(self, 'result_label') and self.result_label:
            result = self.result_label.text()

        return {'fields': data, 'result': result}

    def set_data(self, data):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Å–µ –ø–æ–ª—è –≤–∫–ª–∞–¥–∫–∏.

        Args:
            data: dict —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        """
        if not isinstance(data, dict):
            return

        fields_data = data.get('fields', {})

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if self._named_fields:
            for name, field in self._named_fields.items():
                if isinstance(field, QLineEdit) and name in fields_data:
                    field.setText(str(fields_data[name]))
        else:
            # –ò–Ω–∞—á–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É
            for i, field in enumerate(self._input_fields):
                field_name = f'field_{i}'
                if isinstance(field, QLineEdit) and field_name in fields_data:
                    field.setText(str(fields_data[field_name]))

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
        result = data.get('result')
        if result and hasattr(self, 'result_label') and self.result_label:
            self.result_label.setText(str(result))

    def clear_fields(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ (–∞–ª–∏–∞—Å –¥–ª—è _clear_all_fields)."""
        self._clear_all_fields()
