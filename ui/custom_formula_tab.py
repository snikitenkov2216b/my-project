# ui/custom_formula_tab.py
"""
–í–∫–ª–∞–¥–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏ —Ä–∞—Å—á–µ—Ç–∞ –ø–∞—Ä–Ω–∏–∫–æ–≤—ã—Ö –≥–∞–∑–æ–≤.
–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è 2.0 —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX.

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—É–ª —Å –ø–æ–º–æ—â—å—é LaTeX
- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
- –ë–ª–æ–∫–∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–µ–π
- –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª
- –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

–ê–≤—Ç–æ—Ä: GHG Calculator Team
–í–µ—Ä—Å–∏—è: 2.0
"""

import logging
import json
import re
from pathlib import Path
from datetime import datetime

import matplotlib
matplotlib.use('Agg')  # –ë–µ–∑ GUI
import matplotlib.pyplot as plt

from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QFormLayout, QLineEdit, QPushButton, QLabel,
    QMessageBox, QGroupBox, QScrollArea, QHBoxLayout, QFileDialog, 
    QSpinBox, QInputDialog, QTextEdit
)
from PyQt6.QtGui import QPixmap, QImage, QDoubleValidator
from PyQt6.QtCore import Qt, QLocale, QTimer

from calculations.custom_formula_evaluator import CustomFormulaEvaluator
from paths import get_user_data_dir


# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Ñ–æ—Ä–º—É–ª
LIBRARY_FILE = get_user_data_dir() / "formulas_library.json"


class CustomFormulaTab(QWidget):
    """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª."""
    
    def __init__(self, parent=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–∫–∏."""
        super().__init__(parent)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.evaluator = CustomFormulaEvaluator()
        self.logger = logging.getLogger(__name__)
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
        self.variable_widgets = {}  # {–∏–º—è_–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: (QLabel, QLineEdit)}
        self.sum_blocks = []  # –°–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞
        self.last_calculation_result = None
        self.last_calculation_details = None
        
        # –õ–æ–∫–∞–ª—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–∏—Å–µ–ª
        self.c_locale = QLocale(QLocale.Language.English, QLocale.Country.UnitedStates)
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ñ–æ—Ä–º—É–ª—ã
        self.render_timer = QTimer(self)
        self.render_timer.setSingleShot(True)
        self.render_timer.timeout.connect(self._render_formula)
        
        self._init_ui()
        self.logger.info("CustomFormulaTab initialized")

    def _init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        main_layout = QVBoxLayout(self)
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setStyleSheet("QScrollArea { border: none; }")
        
        main_widget = QWidget()
        self.form_container_layout = QVBoxLayout(main_widget)
        self.form_container_layout.setAlignment(Qt.AlignmentFlag.AlignTop)
        self.form_container_layout.setSpacing(15)
        
        scroll_area.setWidget(main_widget)
        main_layout.addWidget(scroll_area)
        
        # === 1. –ë–õ–û–ö –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–ò–ë–õ–ò–û–¢–ï–ö–û–ô ===
        self._create_library_management_block()
        
        # === 2. –ë–õ–û–ö –í–í–û–î–ê –ò –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò –§–û–†–ú–£–õ–´ ===
        self._create_formula_input_block()
        
        # === 3. –ö–û–ù–¢–ï–ô–ù–ï–† –î–õ–Ø –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–• –ë–õ–û–ö–û–í ===
        self.dynamic_blocks_layout = QVBoxLayout()
        self.dynamic_blocks_layout.setSpacing(10)
        self.form_container_layout.addLayout(self.dynamic_blocks_layout)
        
        # === 4. –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–õ–û–ö–ê–ú–ò –°–£–ú–ú–ò–†–û–í–ê–ù–ò–Ø ===
        self._create_sum_block_controls()
        
        # === 5. –ë–õ–û–ö –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ò –≠–ö–°–ü–û–†–¢–ê ===
        self._create_results_block()

    def _create_library_management_block(self):
        """–°–æ–∑–¥–∞–µ—Ç –±–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π —Ñ–æ—Ä–º—É–ª."""
        management_group = QGroupBox("üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ñ–æ—Ä–º—É–ª")
        management_layout = QHBoxLayout(management_group)
        
        self.load_button = QPushButton("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")
        self.load_button.setToolTip("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É–ª—É")
        self.load_button.clicked.connect(self._load_formula_from_library)
        
        self.save_button = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É")
        self.save_button.setToolTip("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ñ–æ—Ä–º—É–ª—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        self.save_button.clicked.connect(self._save_formula_to_library)
        
        management_layout.addWidget(self.load_button)
        management_layout.addWidget(self.save_button)
        management_layout.addStretch()
        
        self.form_container_layout.addWidget(management_group)

    def _create_formula_input_block(self):
        """–°–æ–∑–¥–∞–µ—Ç –±–ª–æ–∫ –≤–≤–æ–¥–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª—ã."""
        formula_group = QGroupBox("üìù –§–æ—Ä–º—É–ª–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞")
        formula_layout = QVBoxLayout(formula_group)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ñ–æ—Ä–º—É–ª—ã
        input_layout = QHBoxLayout()
        
        self.formula_input = QLineEdit()
        self.formula_input.setPlaceholderText(
            "–ü—Ä–∏–º–µ—Ä: E_CO2_y = Sum_Block_1 + C_factor * 3.66"
        )
        self.formula_input.textChanged.connect(self._on_formula_text_changed)
        self.formula_input.setMinimumHeight(35)
        
        self.help_button = QPushButton("‚ùì")
        self.help_button.setFixedSize(35, 35)
        self.help_button.setToolTip("–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É —Ñ–æ—Ä–º—É–ª")
        self.help_button.clicked.connect(self._show_help_dialog)
        
        input_layout.addWidget(QLabel("<b>–§–æ—Ä–º—É–ª–∞:</b>"))
        input_layout.addWidget(self.formula_input, 1)
        input_layout.addWidget(self.help_button)
        
        formula_layout.addLayout(input_layout)
        
        # –û–±–ª–∞—Å—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ä–º—É–ª—ã (LaTeX —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥)
        preview_label = QLabel("<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</b>")
        formula_layout.addWidget(preview_label)
        
        self.formula_display = QLabel()
        self.formula_display.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.formula_display.setMinimumHeight(100)
        self.formula_display.setStyleSheet(
            "QLabel { background-color: white; border: 1px solid #ccc; "
            "border-radius: 5px; padding: 10px; }"
        )
        self.formula_display.setText("–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—É –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞...")
        formula_layout.addWidget(self.formula_display)
        
        # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—É–ª—ã
        self.analyze_button = QPushButton("üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
        self.analyze_button.setToolTip(
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º—É–ª–µ"
        )
        self.analyze_button.clicked.connect(self._analyze_and_create_fields)
        self.analyze_button.setStyleSheet(
            "QPushButton { background-color: #4CAF50; color: white; "
            "font-weight: bold; padding: 8px; border-radius: 4px; }"
            "QPushButton:hover { background-color: #45a049; }"
        )
        formula_layout.addWidget(self.analyze_button)
        
        self.form_container_layout.addWidget(formula_group)

    def _create_sum_block_controls(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è."""
        self.add_sum_block_button = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è")
        self.add_sum_block_button.setToolTip(
            "–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã: Œ£(–≤—ã—Ä–∞–∂–µ–Ω–∏–µ_j) –¥–ª—è j=1..n"
        )
        self.add_sum_block_button.clicked.connect(self._add_sum_block)
        self.add_sum_block_button.setStyleSheet(
            "QPushButton { background-color: #2196F3; color: white; "
            "font-weight: bold; padding: 8px; border-radius: 4px; }"
            "QPushButton:hover { background-color: #0b7dda; }"
        )
        self.form_container_layout.addWidget(self.add_sum_block_button)

    def _create_results_block(self):
        """–°–æ–∑–¥–∞–µ—Ç –±–ª–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞."""
        results_group = QGroupBox("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞")
        results_layout = QVBoxLayout(results_group)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞
        self.result_label = QLabel("–†–µ–∑—É–ª—å—Ç–∞—Ç: <i>–Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω</i>")
        self.result_label.setStyleSheet(
            "QLabel { font-size: 16px; font-weight: bold; "
            "padding: 10px; background-color: #f0f0f0; "
            "border-radius: 5px; }"
        )
        results_layout.addWidget(self.result_label)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons_layout = QHBoxLayout()
        
        self.calculate_button = QPushButton("üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å")
        self.calculate_button.setToolTip("–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—É–ª–µ")
        self.calculate_button.clicked.connect(self._perform_calculation)
        self.calculate_button.setStyleSheet(
            "QPushButton { background-color: #FF9800; color: white; "
            "font-weight: bold; padding: 10px; border-radius: 4px; }"
            "QPushButton:hover { background-color: #e68900; }"
        )
        
        self.export_button = QPushButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        self.export_button.setToolTip("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª")
        self.export_button.clicked.connect(self._export_results)
        self.export_button.setEnabled(False)
        self.export_button.setStyleSheet(
            "QPushButton { background-color: #607D8B; color: white; "
            "padding: 10px; border-radius: 4px; }"
            "QPushButton:hover { background-color: #546E7A; }"
            "QPushButton:disabled { background-color: #cccccc; }"
        )
        
        buttons_layout.addWidget(self.calculate_button, 1)
        buttons_layout.addWidget(self.export_button, 1)
        
        results_layout.addLayout(buttons_layout)
        self.form_container_layout.addWidget(results_group)

    # ==================== –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ ====================

    def _on_formula_text_changed(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ñ–æ—Ä–º—É–ª—ã (–æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥)."""
        self.render_timer.start(500)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 500 –º—Å

    def _render_formula(self):
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ñ–æ—Ä–º—É–ª—ã –≤ LaTeX —Å –ø–æ–º–æ—â—å—é matplotlib."""
        formula_text = self.formula_input.text().strip()
        
        if not formula_text:
            self.formula_display.setText("–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—É –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞...")
            return
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º—É–ª—É –≤ LaTeX —Ñ–æ—Ä–º–∞—Ç
            formula_latex = self._convert_to_latex(formula_text)
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã
            fig, ax = plt.subplots(figsize=(8, 1.5), dpi=120)
            ax.text(0.5, 0.5, f"${formula_latex}$", size=14, 
                   ha='center', va='center')
            ax.axis('off')
            fig.tight_layout(pad=0.1)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ QImage
            fig.canvas.draw()
            buf = fig.canvas.buffer_rgba()
            plt.close(fig)
            
            q_image = QImage(
                buf, buf.shape[1], buf.shape[0], 
                QImage.Format.Format_RGBA8888
            )
            self.formula_display.setPixmap(QPixmap.fromImage(q_image))
            
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ LaTeX: {e}")
            self.formula_display.setText(f"‚ö† –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª—ã")

    def _convert_to_latex(self, formula_text: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º—É–ª—É –≤ LaTeX —Ñ–æ—Ä–º–∞—Ç."""
        latex = formula_text
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
        def to_latex_var(var_name):
            parts = var_name.split('_')
            if len(parts) > 1:
                base = parts[0]
                indices = ','.join([
                    f"\\text{{{p}}}" if not p.isdigit() and p != 'j' else p 
                    for p in parts[1:]
                ])
                return f"{base}_{{{indices}}}"
            return var_name
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        all_vars = re.findall(r'[a-zA-Z_][a-zA-Z0-9_]*', latex)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        for var in sorted(set(all_vars), key=len, reverse=True):
            if var.lower().startswith("sum_block_"):
                block = next((b for b in self.sum_blocks if b["name"] == var), None)
                if block and block["expression_input"] and block["item_count"]:
                    sum_expr = block["expression_input"].text() or "..."
                    n = block["item_count"].value()
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å—É–º–º—ã
                    sum_expr_latex = re.sub(
                        r'([a-zA-Z_][a-zA-Z0-9_]*)', 
                        lambda m: to_latex_var(m.group(1)), 
                        sum_expr.replace('*', r' \times ')
                    )
                    
                    sum_block_latex = f"\\sum_{{j=1}}^{{{n}}} \\left({sum_expr_latex}\\right)"
                    latex = latex.replace(var, sum_block_latex)
            else:
                # –û–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                latex = re.sub(r'\b' + var + r'\b', to_latex_var(var), latex)
        
        # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        latex = latex.replace('*', r' \times ')
        latex = re.sub(r'(\S+)\s*\*\*\s*(\S+)', r'{\1}^{\2}', latex)
        latex = re.sub(r'(\S+)\s*/\s*(\S+)', r'\\frac{\1}{\2}', latex)
        
        return latex

    def _analyze_and_create_fields(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º—É–ª—É –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—è –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö."""
        formula = self.formula_input.text().strip()
        
        if not formula:
            QMessageBox.warning(
                self, "–û—à–∏–±–∫–∞", 
                "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
            )
            return
        
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            self._clear_simple_variable_fields()
            
            # –ü–∞—Ä—Å–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            all_variables = self.evaluator.parse_variables(formula)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ "–ø—Ä–æ—Å—Ç—ã–µ" –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–Ω–µ Sum_Block_*)
            simple_vars = {
                v for v in all_variables 
                if not v.lower().startswith('sum_block_')
            }
            
            if not simple_vars:
                QMessageBox.information(
                    self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                    "–í —Ñ–æ—Ä–º—É–ª–µ –Ω–µ—Ç –ø—Ä–æ—Å—Ç—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö. "
                    "–í–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –±–ª–æ–∫–∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è."
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            variables_group = QGroupBox("üî¢ –ó–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
            variables_layout = QFormLayout(variables_group)
            variables_layout.setSpacing(10)
            
            for var_name in sorted(simple_vars):
                label = QLabel(f"<b>{var_name}:</b>")
                label.setToolTip(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π {var_name}")
                
                line_edit = QLineEdit()
                line_edit.setPlaceholderText("0.0")
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è: —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
                validator = QDoubleValidator(-1e12, 1e12, 6, self)
                validator.setLocale(self.c_locale)
                line_edit.setValidator(validator)
                
                variables_layout.addRow(label, line_edit)
                self.variable_widgets[var_name] = (label, line_edit)
            
            self.dynamic_blocks_layout.addWidget(variables_group)
            self.logger.info(f"Created fields for {len(simple_vars)} variables")
            
        except Exception as e:
            QMessageBox.critical(
                self, "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É–ª—É:\n{e}"
            )

    def _clear_simple_variable_fields(self):
        """–û—á–∏—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—è –±–ª–æ–∫–∏ —Å—É–º–º)."""
        for i in reversed(range(self.dynamic_blocks_layout.count())):
            widget = self.dynamic_blocks_layout.itemAt(i).widget()
            if widget and not widget.objectName().startswith("Sum_Block"):
                widget.deleteLater()
        
        self.variable_widgets.clear()

    def _add_sum_block(self, expression="", item_count=1):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –±–ª–æ–∫ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è."""
        block_id = len(self.sum_blocks) + 1
        block_name = f"Sum_Block_{block_id}"
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –±–ª–æ–∫–∞
        sum_group = QGroupBox(f"Œ£ –ë–ª–æ–∫ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: {block_name}")
        sum_group.setObjectName(block_name)
        sum_group.setStyleSheet(
            "QGroupBox { font-weight: bold; border: 2px solid #2196F3; "
            "border-radius: 5px; margin-top: 10px; padding: 10px; }"
            "QGroupBox::title { subcontrol-origin: margin; "
            "left: 10px; padding: 0 5px; }"
        )
        
        block_layout = QVBoxLayout(sum_group)
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–∞
        header_layout = QHBoxLayout()
        header_layout.addStretch()
        
        remove_button = QPushButton("üóë –£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫")
        remove_button.setToolTip("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è")
        remove_button.setFixedSize(120, 30)
        remove_button.setStyleSheet(
            "QPushButton { background-color: #f44336; color: white; "
            "border-radius: 4px; }"
            "QPushButton:hover { background-color: #da190b; }"
        )
        
        def remove_this_block():
            self._remove_sum_block(block_name)
        
        remove_button.clicked.connect(remove_this_block)
        header_layout.addWidget(remove_button)
        block_layout.addLayout(header_layout)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–ª–æ–∫–∞
        settings_layout = QFormLayout()
        settings_layout.setSpacing(8)
        
        # –í—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        expression_input = QLineEdit(expression)
        expression_input.setPlaceholderText("–ü—Ä–∏–º–µ—Ä: FC_j * EF_j * OF_j")
        expression_input.setToolTip(
            "–í—ã—Ä–∞–∂–µ–Ω–∏–µ —Å –∏–Ω–¥–µ–∫—Å–æ–º '_j', –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ _1, _2, ..., _n"
        )
        expression_input.textChanged.connect(self._on_formula_text_changed)
        settings_layout.addRow("<b>–í—ã—Ä–∞–∂–µ–Ω–∏–µ (—Å '_j'):</b>", expression_input)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        item_count_spinbox = QSpinBox()
        item_count_spinbox.setRange(1, 100)
        item_count_spinbox.setValue(item_count)
        item_count_spinbox.setToolTip("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å—É–º–º–µ (n)")
        item_count_spinbox.valueChanged.connect(self._on_formula_text_changed)
        settings_layout.addRow("<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (n):</b>", item_count_spinbox)
        
        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–µ–π
        generate_button = QPushButton("‚ö° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—è –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        generate_button.setToolTip(
            "–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—É–º–º—ã"
        )
        generate_button.setStyleSheet(
            "QPushButton { background-color: #9C27B0; color: white; "
            "padding: 8px; border-radius: 4px; font-weight: bold; }"
            "QPushButton:hover { background-color: #7B1FA2; }"
        )
        
        settings_layout.addRow("", generate_button)
        block_layout.addLayout(settings_layout)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç—Ä–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        rows_container = QWidget()
        rows_layout = QVBoxLayout(rows_container)
        rows_layout.setSpacing(5)
        rows_layout.setContentsMargins(0, 10, 0, 0)
        block_layout.addWidget(rows_container)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞
        block_data = {
            "name": block_name,
            "group_widget": sum_group,
            "expression_input": expression_input,
            "item_count": item_count_spinbox,
            "rows_layout": rows_layout,
            "variable_rows": []
        }
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        def generate_fields():
            self._generate_sum_block_fields(block_data)
        
        generate_button.clicked.connect(generate_fields)
        
        self.sum_blocks.append(block_data)
        self.dynamic_blocks_layout.addWidget(sum_group)
        
        self.logger.info(f"Added {block_name}")

    def _remove_sum_block(self, block_name: str):
        """–£–¥–∞–ª—è–µ—Ç –±–ª–æ–∫ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è."""
        block_to_remove = next(
            (b for b in self.sum_blocks if b["name"] == block_name), 
            None
        )
        
        if block_to_remove:
            block_to_remove["group_widget"].deleteLater()
            self.sum_blocks.remove(block_to_remove)
            self.logger.info(f"Removed {block_name}")
            self._on_formula_text_changed()

    def _generate_sum_block_fields(self, block_data: dict):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–ª–æ–∫–∞ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è."""
        expression = block_data["expression_input"].text().strip()
        
        if not expression:
            QMessageBox.warning(
                self, "–û—à–∏–±–∫–∞",
                "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±–ª–æ–∫–∞ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è."
            )
            return
        
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏
            for row in block_data["variable_rows"]:
                row["widget"].deleteLater()
            block_data["variable_rows"].clear()
            
            # –ü–∞—Ä—Å–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            base_vars = self.evaluator.parse_variables(expression)
            
            if not base_vars:
                QMessageBox.warning(
                    self, "–û—à–∏–±–∫–∞",
                    "–í –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ."
                )
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            count = block_data["item_count"].value()
            
            for i in range(1, count + 1):
                row_widget = QWidget()
                row_widget.setStyleSheet(
                    "QWidget { background-color: #f9f9f9; "
                    "border: 1px solid #ddd; border-radius: 3px; "
                    "padding: 5px; }"
                )
                
                row_layout = QHBoxLayout(row_widget)
                row_layout.setSpacing(8)
                
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–∞
                element_label = QLabel(f"<b>–≠–ª–µ–º–µ–Ω—Ç {i}:</b>")
                element_label.setMinimumWidth(80)
                row_layout.addWidget(element_label)
                
                # –ü–æ–ª—è –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                row_inputs = {}
                
                for var in sorted(base_vars):
                    # –ó–∞–º–µ–Ω—è–µ–º '_j' –Ω–∞ '_i'
                    indexed_var_name = var.replace('_j', f'_{i}')
                    
                    var_label = QLabel(f"{indexed_var_name}:")
                    var_label.setMinimumWidth(60)
                    
                    line_edit = QLineEdit()
                    line_edit.setPlaceholderText("0.0")
                    line_edit.setMinimumWidth(80)
                    
                    validator = QDoubleValidator(-1e12, 1e12, 6, self)
                    validator.setLocale(self.c_locale)
                    line_edit.setValidator(validator)
                    
                    row_layout.addWidget(var_label)
                    row_layout.addWidget(line_edit)
                    
                    row_inputs[indexed_var_name] = line_edit
                
                row_layout.addStretch()
                
                block_data["variable_rows"].append({
                    "widget": row_widget,
                    "inputs": row_inputs
                })
                
                block_data["rows_layout"].addWidget(row_widget)
            
            self.logger.info(
                f"Generated {count} rows for {block_data['name']}"
            )
            
        except Exception as e:
            QMessageBox.critical(
                self, "–û—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—è:\n{e}"
            )

    def _perform_calculation(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—á–µ—Ç –ø–æ —Ñ–æ—Ä–º—É–ª–µ."""
        formula = self.formula_input.text().strip()
        
        if not formula:
            QMessageBox.warning(
                self, "–û—à–∏–±–∫–∞",
                "–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞."
            )
            return
        
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            variables = {}
            
            for var_name, (_, line_edit) in self.variable_widgets.items():
                value = self._get_float_value(line_edit, var_name)
                variables[var_name] = value
            
            # –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            calculation_details = {
                "formula": formula,
                "timestamp": datetime.now().isoformat(),
                "simple_variables": dict(variables),
                "sum_blocks": []
            }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
            for block in self.sum_blocks:
                expression = block["expression_input"].text().strip()
                
                if not expression:
                    raise ValueError(
                        f"–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {block['name']}"
                    )
                
                # –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                variables_by_index = []
                
                for row in block["variable_rows"]:
                    row_values = {
                        name: self._get_float_value(widget, name)
                        for name, widget in row["inputs"].items()
                    }
                    variables_by_index.append(row_values)
                
                if not variables_by_index:
                    raise ValueError(
                        f"–ù–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–ª—è –¥–ª—è {block['name']}"
                    )
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É
                sum_result = self.evaluator.evaluate_sum_block(
                    expression, variables_by_index
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–ª–æ–∫–∞
                variables[block["name"]] = sum_result
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –≤ –æ—Ç—á–µ—Ç
                calculation_details["sum_blocks"].append({
                    "name": block["name"],
                    "expression": expression,
                    "items": variables_by_index,
                    "sum_result": sum_result
                })
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            result = self.evaluator.evaluate(formula, variables)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.result_label.setText(
                f"<span style='color: green;'>–†–µ–∑—É–ª—å—Ç–∞—Ç: {result:.6f}</span>"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            self.last_calculation_result = result
            self.last_calculation_details = calculation_details
            self.export_button.setEnabled(True)
            
            self.logger.info(f"Calculation successful: {result:.6f}")
            
        except Exception as e:
            error_msg = str(e)
            self.result_label.setText(
                f"<span style='color: red;'>–û—à–∏–±–∫–∞: {error_msg}</span>"
            )
            self.export_button.setEnabled(False)
            
            QMessageBox.critical(
                self, "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏:\n\n{error_msg}"
            )

    def _get_float_value(self, line_edit: QLineEdit, field_name: str) -> float:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞."""
        text = line_edit.text().replace(',', '.').strip()
        
        if not text:
            raise ValueError(
                f"–ü–æ–ª–µ '{field_name}' –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
            )
        
        try:
            return float(text)
        except ValueError:
            raise ValueError(
                f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ '{field_name}': '{text}'"
            )

    def _export_results(self):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª."""
        if self.last_calculation_result is None:
            QMessageBox.warning(
                self, "–û—à–∏–±–∫–∞",
                "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞—Å—á–µ—Ç."
            )
            return
        
        # –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        file_path, _ = QFileDialog.getSaveFileName(
            self,
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞",
            str(get_user_data_dir() / "calculation_result.txt"),
            "–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (*.txt);;–í—Å–µ —Ñ–∞–π–ª—ã (*)"
        )
        
        if not file_path:
            return
        
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write("=" * 70 + "\n")
                f.write("–û–¢–ß–ï–¢ –û –†–ê–°–ß–ï–¢–ï –í–´–ë–†–û–°–û–í –ü–ê–†–ù–ò–ö–û–í–´–• –ì–ê–ó–û–í\n")
                f.write("=" * 70 + "\n\n")
                
                details = self.last_calculation_details
                
                f.write(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {details['timestamp']}\n\n")
                f.write(f"–§–æ—Ä–º—É–ª–∞:\n{details['formula']}\n\n")
                
                # –ü—Ä–æ—Å—Ç—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                if details['simple_variables']:
                    f.write("–ó–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:\n")
                    f.write("-" * 40 + "\n")
                    for var, value in details['simple_variables'].items():
                        f.write(f"  {var:20s} = {value:12.6f}\n")
                    f.write("\n")
                
                # –ë–ª–æ–∫–∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
                if details['sum_blocks']:
                    f.write("–ë–ª–æ–∫–∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:\n")
                    f.write("-" * 40 + "\n")
                    
                    for block in details['sum_blocks']:
                        f.write(f"\n{block['name']}:\n")
                        f.write(f"  –í—ã—Ä–∞–∂–µ–Ω–∏–µ: {block['expression']}\n")
                        f.write(f"  –≠–ª–µ–º–µ–Ω—Ç—ã:\n")
                        
                        for i, item in enumerate(block['items'], 1):
                            f.write(f"    –≠–ª–µ–º–µ–Ω—Ç {i}:\n")
                            for var, val in item.items():
                                f.write(f"      {var} = {val:.6f}\n")
                        
                        f.write(f"  –°—É–º–º–∞: {block['sum_result']:.6f}\n")
                    f.write("\n")
                
                # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                f.write("=" * 70 + "\n")
                f.write(f"–ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {self.last_calculation_result:.6f}\n")
                f.write("=" * 70 + "\n")
            
            QMessageBox.information(
                self, "–£—Å–ø–µ—Ö",
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤:\n{file_path}"
            )
            
            self.logger.info(f"Results exported to: {file_path}")
            
        except Exception as e:
            QMessageBox.critical(
                self, "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{e}"
            )

    # ==================== –ë–ò–ë–õ–ò–û–¢–ï–ö–ê –§–û–†–ú–£–õ ====================

    def _save_formula_to_library(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é —Ñ–æ—Ä–º—É–ª—É –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É."""
        formula = self.formula_input.text().strip()
        
        if not formula:
            QMessageBox.warning(
                self, "–û—à–∏–±–∫–∞",
                "–ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å. –í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—É."
            )
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        name, ok = QInputDialog.getText(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É",
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º—É–ª—ã:"
        )
        
        if not ok or not name.strip():
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        formula_data = {
            "name": name.strip(),
            "main_formula": formula,
            "sum_blocks": [
                {
                    "name": block["name"],
                    "expression": block["expression_input"].text(),
                    "item_count": block["item_count"].value()
                }
                for block in self.sum_blocks
            ]
        }
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É
            library = self._load_library()
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é —Å —Ç–∞–∫–∏–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            library = [f for f in library if f['name'] != name.strip()]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ–æ—Ä–º—É–ª—É
            library.append(formula_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            self._save_library(library)
            
            QMessageBox.information(
                self, "–£—Å–ø–µ—Ö",
                f"–§–æ—Ä–º—É–ª–∞ '{name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É."
            )
            
            self.logger.info(f"Formula saved to library: {name}")
            
        except Exception as e:
            QMessageBox.critical(
                self, "–û—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É:\n{e}"
            )

    def _load_formula_from_library(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ä–º—É–ª—É –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏."""
        try:
            library = self._load_library()
            
            if not library:
                QMessageBox.information(
                    self, "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞",
                    "–í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª."
                )
                return
            
            # –í—ã–±–æ—Ä —Ñ–æ—Ä–º—É–ª—ã
            formula_names = [f['name'] for f in library]
            
            name, ok = QInputDialog.getItem(
                self, "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É",
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:",
                formula_names, 0, False
            )
            
            if not ok:
                return
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ñ–æ—Ä–º—É–ª—É
            formula_data = next(
                (f for f in library if f['name'] == name), 
                None
            )
            
            if formula_data:
                self._reconstruct_ui_from_formula(formula_data)
                
                QMessageBox.information(
                    self, "–£—Å–ø–µ—Ö",
                    f"–§–æ—Ä–º—É–ª–∞ '{name}' –∑–∞–≥—Ä—É–∂–µ–Ω–∞."
                )
                
                self.logger.info(f"Formula loaded from library: {name}")
            
        except Exception as e:
            QMessageBox.critical(
                self, "–û—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É:\n{e}"
            )

    def _reconstruct_ui_from_formula(self, formula_data: dict):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç UI –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª—ã."""
        # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        self.formula_input.clear()
        self._clear_simple_variable_fields()
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –±–ª–æ–∫–∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        for block in list(self.sum_blocks):
            self._remove_sum_block(block["name"])
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—É
        self.formula_input.setText(formula_data.get("main_formula", ""))
        
        # –í–æ—Å—Å–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        for block_data in formula_data.get("sum_blocks", []):
            self._add_sum_block(
                expression=block_data.get("expression", ""),
                item_count=block_data.get("item_count", 1)
            )
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É–ª—É
        self._analyze_and_create_fields()
        self._on_formula_text_changed()

    def _load_library(self) -> list:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Ñ–æ—Ä–º—É–ª –∏–∑ —Ñ–∞–π–ª–∞."""
        if not LIBRARY_FILE.exists():
            return []
        
        try:
            with open(LIBRARY_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (json.JSONDecodeError, IOError):
            return []

    def _save_library(self, library: list):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Ñ–æ—Ä–º—É–ª –≤ —Ñ–∞–π–ª."""
        LIBRARY_FILE.parent.mkdir(parents=True, exist_ok=True)
        
        with open(LIBRARY_FILE, 'w', encoding='utf-8') as f:
            json.dump(library, f, ensure_ascii=False, indent=2)

    # ==================== –°–ü–†–ê–í–ö–ê ====================

    def _show_help_dialog(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –º–æ–¥—É–ª—è."""
        help_text = """
        <h2>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –º–æ–¥—É–ª—é "–°–≤–æ—è —Ñ–æ—Ä–º—É–ª–∞"</h2>
        
        <h3>üìå –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</h3>
        <ul>
            <li>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª —Ä–∞—Å—á–µ—Ç–∞ –≤—ã–±—Ä–æ—Å–æ–≤ –ü–ì</li>
            <li>–ë–ª–æ–∫–∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π</li>
            <li>–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—É–ª –≤ LaTeX —Ñ–æ—Ä–º–∞—Ç–µ</li>
            <li>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É</li>
            <li>–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª</li>
        </ul>
        
        <h3>üî¢ –°–∏–Ω—Ç–∞–∫—Å–∏—Å —Ñ–æ—Ä–º—É–ª</h3>
        <table border="1" cellpadding="5" style="border-collapse: collapse;">
            <tr bgcolor="#f0f0f0">
                <th>–û–ø–µ—Ä–∞—Ü–∏—è</th>
                <th>–°–∏–Ω—Ç–∞–∫—Å–∏—Å</th>
                <th>–ü—Ä–∏–º–µ—Ä</th>
            </tr>
            <tr>
                <td>–£–º–Ω–æ–∂–µ–Ω–∏–µ</td>
                <td>*</td>
                <td>a * b</td>
            </tr>
            <tr>
                <td>–î–µ–ª–µ–Ω–∏–µ</td>
                <td>/</td>
                <td>a / b</td>
            </tr>
            <tr>
                <td>–°—Ç–µ–ø–µ–Ω—å</td>
                <td>**</td>
                <td>a**2</td>
            </tr>
            <tr>
                <td>–°–∫–æ–±–∫–∏</td>
                <td>( )</td>
                <td>(a + b) * c</td>
            </tr>
            <tr>
                <td>–ò–Ω–¥–µ–∫—Å—ã</td>
                <td>_</td>
                <td>EF_CO2_y</td>
            </tr>
        </table>
        
        <h3>üìä –ë–ª–æ–∫–∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
        <p>–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã: Œ£(–≤—ã—Ä–∞–∂–µ–Ω–∏–µ_j) –¥–ª—è j=1..n</p>
        <ol>
            <li>–ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"</li>
            <li>–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å –∏–Ω–¥–µ–∫—Å–æ–º '_j' (–Ω–∞–ø—Ä–∏–º–µ—Ä: FC_j * EF_j)</li>
            <li>–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (n)</li>
            <li>–ù–∞–∂–º–∏—Ç–µ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—è"</li>
            <li>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞</li>
            <li>–í –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º—É–ª–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–º—è –±–ª–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Sum_Block_1)</li>
        </ol>
        
        <h3>üí° –ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º—É–ª</h3>
        <p><b>–ü—Ä–∏–º–µ—Ä 1:</b> –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞</p>
        <pre>E_CO2 = FC * EF * OF</pre>
        
        <p><b>–ü—Ä–∏–º–µ—Ä 2:</b> –° –±–ª–æ–∫–æ–º —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è</p>
        <pre>E_total = Sum_Block_1 + C_const * 3.66</pre>
        <p>–≥–¥–µ Sum_Block_1 —Å–æ–¥–µ—Ä–∂–∏—Ç: FC_j * EF_j * OF_j</p>
        
        <hr>
        <p><i>–î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.</i></p>
        """
        
        msg_box = QMessageBox(self)
        msg_box.setWindowTitle("–°–ø—Ä–∞–≤–∫–∞ - –°–≤–æ—è —Ñ–æ—Ä–º—É–ª–∞")
        msg_box.setTextFormat(Qt.TextFormat.RichText)
        msg_box.setText(help_text)
        msg_box.setStandardButtons(QMessageBox.StandardButton.Ok)
        msg_box.exec()


# ==================== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ====================

if __name__ == "__main__":
    import sys
    from PyQt6.QtWidgets import QApplication
    
    logging.basicConfig(level=logging.DEBUG)
    
    app = QApplication(sys.argv)
    window = CustomFormulaTab()
    window.setWindowTitle("–¢–µ—Å—Ç - –°–≤–æ—è —Ñ–æ—Ä–º—É–ª–∞")
    window.resize(900, 700)
    window.show()
    
    sys.exit(app.exec())
