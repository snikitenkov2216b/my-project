# ui/main_window_extended.py
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞—Å—á–µ—Ç–æ–≤ –ø–æ–≥–ª–æ—â–µ–Ω–∏—è –ü–ì.
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –≤–∫–ª–∞–¥–æ–∫.
"""
import logging
import json
from datetime import datetime
from PyQt6.QtWidgets import (
    QMainWindow, QTabWidget, QMenuBar, QMenu,
    QMessageBox, QVBoxLayout, QWidget, QStatusBar,
    QToolBar, QLabel, QProgressBar, QFileDialog
)
from PyQt6.QtCore import Qt, QTimer
from PyQt6.QtGui import QAction, QIcon, QKeySequence

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∫–ª–∞–¥–æ–∫
from ui.tab_config import (
    EMISSION_TABS_CONFIG,
    ABSORPTION_TABS_CONFIG,
    get_emission_tab_class,
    get_absorption_tab_class
)

# –ò–º–ø–æ—Ä—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ–∞–±—Ä–∏–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤
from calculations.calculator_factory_extended import ExtendedCalculatorFactory

# –ò–º–ø–æ—Ä—Ç –≤–∫–ª–∞–¥–∫–∏ "–°–≤–æ—è —Ñ–æ—Ä–º—É–ª–∞"
from ui.custom_formula_tab import CustomFormulaTab

# –ò–º–ø–æ—Ä—Ç –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∫–ª–∞–¥–æ–∫
from ui.lazy_tab_widget import LazyTabWidget


class ExtendedMainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é."""

    def __init__(self):
        super().__init__()
        self.calculator_factory = ExtendedCalculatorFactory()
        self._init_ui()
        self._init_toolbar()
        self._init_statusbar()
        logging.info("Extended GHG Calculator application started")

    def _init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        self.setWindowTitle("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–∞—Ä–Ω–∏–∫–æ–≤—ã—Ö –≥–∞–∑–æ–≤ - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")
        self.setGeometry(100, 100, 1400, 900)

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(central_widget)

        # –ì–ª–∞–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ (–≤—ã–±—Ä–æ—Å—ã vs –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ)
        self.main_tabs = QTabWidget()

        # –í–∫–ª–∞–¥–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤
        self.emissions_tabs = QTabWidget()
        self.emissions_tabs.setTabPosition(QTabWidget.TabPosition.West)
        self._init_emission_tabs()

        # –í–∫–ª–∞–¥–∫–∞ –ø–æ–≥–ª–æ—â–µ–Ω–∏—è
        self.absorption_tabs = QTabWidget()
        self.absorption_tabs.setTabPosition(QTabWidget.TabPosition.West)
        self._init_absorption_tabs()

        # –í–∫–ª–∞–¥–∫–∞ "–°–≤–æ—è —Ñ–æ—Ä–º—É–ª–∞"
        self.custom_formula_tab = CustomFormulaTab()

        # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
        self.main_tabs.addTab(self.emissions_tabs, "üìä –í—ã–±—Ä–æ—Å—ã –ü–ì")
        self.main_tabs.addTab(self.absorption_tabs, "üå≤ –ü–æ–≥–ª–æ—â–µ–Ω–∏–µ –ü–ì")
        self.main_tabs.addTab(self.custom_formula_tab, "üî¨ –°–≤–æ—è —Ñ–æ—Ä–º—É–ª–∞")

        main_layout.addWidget(self.main_tabs)

    def _init_emission_tabs(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫ —Ä–∞—Å—á–µ—Ç–∞ –≤—ã–±—Ä–æ—Å–æ–≤.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
        """
        for category_num, tab_title in EMISSION_TABS_CONFIG:
            # –°–æ–∑–¥–∞–µ–º factory —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            def create_tab(cat_num=category_num):
                tab_class = get_emission_tab_class(cat_num)
                if tab_class:
                    calculator = self.calculator_factory.get_calculator(f"Category{cat_num}")
                    if calculator:
                        return tab_class(calculator)
                    else:
                        logging.warning(f"–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è Category{cat_num} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    logging.warning(f"–ö–ª–∞—Å—Å –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è Category{cat_num} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None

            # –°–æ–∑–¥–∞–µ–º –ª–µ–Ω–∏–≤—É—é –≤–∫–ª–∞–¥–∫—É
            lazy_tab = LazyTabWidget(create_tab, tab_title)
            self.emissions_tabs.addTab(lazy_tab, tab_title)


    def _init_absorption_tabs(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–≥–ª–æ—â–µ–Ω–∏—è.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
        """
        for calc_type, tab_title, module_name, class_name in ABSORPTION_TABS_CONFIG:
            # –°–æ–∑–¥–∞–µ–º factory —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            def create_tab(c_type=calc_type, m_name=module_name, c_name=class_name):
                tab_class = get_absorption_tab_class(m_name, c_name)
                if tab_class:
                    calculator = self.calculator_factory.get_absorption_calculator(c_type)
                    if calculator:
                        # –ù–µ–∫–æ—Ç–æ—Ä—ã–º –≤–∫–ª–∞–¥–∫–∞–º –Ω—É–∂–µ–Ω extended_data_service
                        extended_data_service = self.calculator_factory.get_extended_data_service()
                        try:
                            return tab_class(calculator, extended_data_service)
                        except TypeError:
                            return tab_class(calculator)
                    else:
                        logging.warning(f"–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è {c_type} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    logging.warning(f"–ö–ª–∞—Å—Å –≤–∫–ª–∞–¥–∫–∏ {c_name} –∏–∑ {m_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None

            # –°–æ–∑–¥–∞–µ–º –ª–µ–Ω–∏–≤—É—é –≤–∫–ª–∞–¥–∫—É
            lazy_tab = LazyTabWidget(create_tab, tab_title)
            self.absorption_tabs.addTab(lazy_tab, tab_title)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–Ω—É—é –≤–∫–ª–∞–¥–∫—É (–ª–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
        def create_summary_tab():
            summary_class = get_absorption_tab_class("ui.absorption_summary_tab", "AbsorptionSummaryTab")
            if summary_class:
                return summary_class(self.calculator_factory, self.absorption_tabs)
            return None

        lazy_summary = LazyTabWidget(create_summary_tab, "üìà –°–≤–æ–¥–Ω—ã–π —Ä–∞—Å—á–µ—Ç")
        self.absorption_tabs.addTab(lazy_summary, "üìà –°–≤–æ–¥–Ω—ã–π —Ä–∞—Å—á–µ—Ç")


    def _init_toolbar(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
        toolbar = QToolBar("–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å")
        toolbar.setMovable(False)
        self.addToolBar(toolbar)
        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        new_btn = toolbar.addAction("‚ûï –ù–æ–≤—ã–π")
        new_btn.triggered.connect(self._new_calculation)
        open_btn = toolbar.addAction("üìÇ –û—Ç–∫—Ä—ã—Ç—å")
        open_btn.triggered.connect(self._open_project)
        save_btn = toolbar.addAction("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        save_btn.triggered.connect(self._save_project)
        toolbar.addSeparator()
        balance_btn = toolbar.addAction("‚öñÔ∏è –ë–∞–ª–∞–Ω—Å")
        balance_btn.triggered.connect(self._show_balance)
        report_btn = toolbar.addAction("üìÑ –û—Ç—á–µ—Ç")
        report_btn.triggered.connect(self._export_report)

    def _init_statusbar(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
        self.statusbar = QStatusBar()
        self.setStatusBar(self.statusbar)
        # –ú–µ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.status_label = QLabel("–ì–æ—Ç–æ–≤–æ")
        self.statusbar.addWidget(self.status_label)
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self.progress_bar = QProgressBar()
        self.progress_bar.setMaximumWidth(200)
        self.progress_bar.setVisible(False)
        self.statusbar.addPermanentWidget(self.progress_bar)
        # –ú–µ—Ç–∫–∞ —Å —Ç–µ–∫—É—â–∏–º —Ä–µ–∂–∏–º–æ–º
        self.mode_label = QLabel("–†–µ–∂–∏–º: –í—ã–±—Ä–æ—Å—ã –ü–ì")
        self.statusbar.addPermanentWidget(self.mode_label)
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–æ–∫
        self.main_tabs.currentChanged.connect(self._update_mode_label)

    def _update_mode_label(self, index):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ —Ä–µ–∂–∏–º–∞."""
        if index == 0:
            self.mode_label.setText("–†–µ–∂–∏–º: –í—ã–±—Ä–æ—Å—ã –ü–ì")
        elif index == 1:
            self.mode_label.setText("–†–µ–∂–∏–º: –ü–æ–≥–ª–æ—â–µ–Ω–∏–µ –ü–ì")
        elif index == 2:
            self.mode_label.setText("–†–µ–∂–∏–º: –°–≤–æ—è —Ñ–æ—Ä–º—É–ª–∞")

    def _new_calculation(self):
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç."""
        reply = QMessageBox.question(
            self,
            "–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç",
            "–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç? –ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        if reply == QMessageBox.StandardButton.Yes:
            # FIX: –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–π
            self._clear_all_fields()
            logging.info("Starting new calculation")
            self.status_label.setText("–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –Ω–∞—á–∞—Ç")

    def _clear_all_fields(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –≤–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–∫–∞—Ö."""
        # –û—á–∏—Å—Ç–∫–∞ –≤–∫–ª–∞–¥–æ–∫ –≤—ã–±—Ä–æ—Å–æ–≤
        for i in range(self.emissions_tabs.count()):
            tab = self.emissions_tabs.widget(i)
            if hasattr(tab, 'clear_fields'):
                tab.clear_fields()
        # –û—á–∏—Å—Ç–∫–∞ –≤–∫–ª–∞–¥–æ–∫ –ø–æ–≥–ª–æ—â–µ–Ω–∏—è
        for i in range(self.absorption_tabs.count()):
            tab = self.absorption_tabs.widget(i)
            if hasattr(tab, 'clear_fields'):
                tab.clear_fields()
        # –û—á–∏—Å—Ç–∫–∞ –≤–∫–ª–∞–¥–∫–∏ "–°–≤–æ—è —Ñ–æ—Ä–º—É–ª–∞"
        if hasattr(self, 'custom_formula_tab') and hasattr(self.custom_formula_tab, 'clear_fields'):
            self.custom_formula_tab.clear_fields()
        logging.info("All fields cleared")

    def _open_project(self):
        """–û—Ç–∫—Ä—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç."""
        try:
            # –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
            file_path, _ = QFileDialog.getOpenFileName(
                self,
                "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç",
                "",
                "–§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ (*.ghg *.json);;–í—Å–µ —Ñ–∞–π–ª—ã (*.*)"
            )

            if not file_path:
                return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä

            self.status_label.setText("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...")

            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
            with open(file_path, 'r', encoding='utf-8') as f:
                project_data = json.load(f)

            # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–π –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
            self._clear_all_fields()

            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –≤–∫–ª–∞–¥–∫–∏ –≤—ã–±—Ä–æ—Å–æ–≤
            if 'emissions' in project_data:
                self._load_emissions_data(project_data['emissions'])

            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –≤–∫–ª–∞–¥–∫–∏ –ø–æ–≥–ª–æ—â–µ–Ω–∏—è
            if 'absorption' in project_data:
                self._load_absorption_data(project_data['absorption'])

            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –≤–∫–ª–∞–¥–∫—É "–°–≤–æ—è —Ñ–æ—Ä–º—É–ª–∞"
            if 'custom_formula' in project_data:
                if hasattr(self, 'custom_formula_tab') and hasattr(self.custom_formula_tab, 'set_data'):
                    self.custom_formula_tab.set_data(project_data['custom_formula'])

            self.status_label.setText(f"–ü—Ä–æ–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {file_path}")
            logging.info(f"Project loaded from {file_path}")

            QMessageBox.information(
                self,
                "–£—Å–ø–µ—à–Ω–æ",
                f"–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞:\n{file_path}"
            )

        except json.JSONDecodeError as e:
            logging.error(f"Error parsing project file: {e}")
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞:\n{str(e)}"
            )
            self.status_label.setText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        except Exception as e:
            logging.error(f"Error opening project: {e}", exc_info=True)
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç:\n{str(e)}"
            )
            self.status_label.setText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞")

    def _save_project(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç."""
        try:
            # –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            file_path, _ = QFileDialog.getSaveFileName(
                self,
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç",
                f"project_{datetime.now().strftime('%Y%m%d_%H%M%S')}.ghg",
                "–§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ (*.ghg *.json);;–í—Å–µ —Ñ–∞–π–ª—ã (*.*)"
            )

            if not file_path:
                return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ

            self.status_label.setText("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...")

            # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
            project_data = {
                'version': '2.0',
                'timestamp': datetime.now().isoformat(),
                'emissions': self._collect_emissions_data(),
                'absorption': self._collect_absorption_data()
            }

            # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–∫–ª–∞–¥–∫–∏ "–°–≤–æ—è —Ñ–æ—Ä–º—É–ª–∞"
            if hasattr(self, 'custom_formula_tab') and hasattr(self.custom_formula_tab, 'get_data'):
                project_data['custom_formula'] = self.custom_formula_tab.get_data()

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(project_data, f, ensure_ascii=False, indent=2)

            self.status_label.setText(f"–ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
            logging.info(f"Project saved to {file_path}")

            QMessageBox.information(
                self,
                "–£—Å–ø–µ—à–Ω–æ",
                f"–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª:\n{file_path}"
            )

        except Exception as e:
            logging.error(f"Error saving project: {e}", exc_info=True)
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç:\n{str(e)}"
            )
            self.status_label.setText("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞")

    def _export_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞."""
        try:
            # –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
            file_path, selected_filter = QFileDialog.getSaveFileName(
                self,
                "–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞",
                f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                "Excel —Ñ–∞–π–ª—ã (*.xlsx);;PDF —Ñ–∞–π–ª—ã (*.pdf);;HTML —Ñ–∞–π–ª—ã (*.html);;–í—Å–µ —Ñ–∞–π–ª—ã (*.*)"
            )

            if not file_path:
                return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —ç–∫—Å–ø–æ—Ä—Ç

            self.status_label.setText("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
            if file_path.endswith('.xlsx'):
                self._export_to_excel(file_path)
            elif file_path.endswith('.pdf'):
                self._export_to_pdf(file_path)
            elif file_path.endswith('.html'):
                self._export_to_html(file_path)
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ Excel
                self._export_to_excel(file_path + '.xlsx')

            self.status_label.setText(f"–û—Ç—á–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {file_path}")
            logging.info(f"Report exported to {file_path}")

            QMessageBox.information(
                self,
                "–£—Å–ø–µ—à–Ω–æ",
                f"–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–∞–π–ª:\n{file_path}"
            )

        except Exception as e:
            logging.error(f"Error exporting report: {e}", exc_info=True)
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç:\n{str(e)}"
            )
            self.status_label.setText("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞")

    def _collect_emissions_data(self):
        """–°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ –≤—ã–±—Ä–æ—Å–æ–≤."""
        emissions_data = {}
        for i in range(self.emissions_tabs.count()):
            tab = self.emissions_tabs.widget(i)
            tab_name = self.emissions_tabs.tabText(i)
            if hasattr(tab, 'get_data'):
                emissions_data[tab_name] = tab.get_data()
        return emissions_data

    def _collect_absorption_data(self):
        """–°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ –ø–æ–≥–ª–æ—â–µ–Ω–∏—è."""
        absorption_data = {}
        for i in range(self.absorption_tabs.count()):
            tab = self.absorption_tabs.widget(i)
            tab_name = self.absorption_tabs.tabText(i)
            if hasattr(tab, 'get_data'):
                absorption_data[tab_name] = tab.get_data()
        return absorption_data

    def _load_emissions_data(self, emissions_data):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –≤–∫–ª–∞–¥–∫–∏ –≤—ã–±—Ä–æ—Å–æ–≤."""
        logging.info(f"Loading emissions data for {len(emissions_data)} categories")
        for i in range(self.emissions_tabs.count()):
            tab = self.emissions_tabs.widget(i)
            tab_name = self.emissions_tabs.tabText(i)
            if tab_name in emissions_data:
                if hasattr(tab, 'set_data'):
                    tab.set_data(emissions_data[tab_name])
                    logging.info(f"Loaded data for {tab_name}")
                else:
                    logging.warning(f"Tab {tab_name} does not have set_data method")
            else:
                logging.debug(f"No data for {tab_name} in saved file")

    def _load_absorption_data(self, absorption_data):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –≤–∫–ª–∞–¥–∫–∏ –ø–æ–≥–ª–æ—â–µ–Ω–∏—è."""
        for i in range(self.absorption_tabs.count()):
            tab = self.absorption_tabs.widget(i)
            tab_name = self.absorption_tabs.tabText(i)
            if tab_name in absorption_data and hasattr(tab, 'set_data'):
                tab.set_data(absorption_data[tab_name])

    def _export_to_excel(self, file_path):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ Excel."""
        try:
            import openpyxl
            from openpyxl.styles import Font, Alignment, PatternFill, Border, Side
            from openpyxl.utils import get_column_letter
            import re

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É Excel
            wb = openpyxl.Workbook()
            wb.remove(wb.active)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏—Å—Ç

            # –°—Ç–∏–ª–∏
            header_font = Font(bold=True, size=12, color="FFFFFF")
            header_fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")
            header_alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)

            subheader_font = Font(bold=True, size=11, color="FFFFFF")
            subheader_fill = PatternFill(start_color="5B9BD5", end_color="5B9BD5", fill_type="solid")

            total_font = Font(bold=True, size=11)
            total_fill = PatternFill(start_color="E7E6E6", end_color="E7E6E6", fill_type="solid")

            thin_border = Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            def extract_number(text):
                if isinstance(text, (int, float)):
                    return float(text)
                if isinstance(text, str):
                    # –ò—â–µ–º —á–∏—Å–ª–æ –≤ —Ç–µ–∫—Å—Ç–µ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤)
                    match = re.search(r'[-+]?\d*\.?\d+(?:[eE][-+]?\d+)?', text.replace(',', '.'))
                    if match:
                        try:
                            return float(match.group())
                        except:
                            pass
                return 0.0

            # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            ws_info = wb.create_sheet("–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            ws_info['A1'] = "–û–¢–ß–ï–¢ –ü–û –í–´–ë–†–û–°–ê–ú –ò –ü–û–ì–õ–û–©–ï–ù–ò–Æ –ü–ê–†–ù–ò–ö–û–í–´–• –ì–ê–ó–û–í"
            ws_info['A1'].font = Font(bold=True, size=16, color="1F4E78")
            ws_info.merge_cells('A1:B1')
            ws_info['A3'] = "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:"
            ws_info['B3'] = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
            ws_info['A4'] = "–í–µ—Ä—Å–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã:"
            ws_info['B4'] = "2.0"
            ws_info['A5'] = "–ú–µ—Ç–æ–¥–∏–∫–∞:"
            ws_info['B5'] = "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω–ø—Ä–∏—Ä–æ–¥—ã –†–§ –æ—Ç 27.05.2022 N 371"

            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–æ—Å–æ–≤
            emissions_data = self._collect_emissions_data()
            if emissions_data:
                ws_emissions = wb.create_sheet("–í—ã–±—Ä–æ—Å—ã –ü–ì")
                row = 1

                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π - —Ç–æ–ª—å–∫–æ —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
                ws_emissions.cell(row, 1, "–¢–∏–ø —Ä–∞—Å—á–µ—Ç–∞").font = header_font
                ws_emissions.cell(row, 1).fill = header_fill
                ws_emissions.cell(row, 1).alignment = header_alignment
                ws_emissions.cell(row, 1).border = thin_border

                ws_emissions.cell(row, 2, "–†–µ–∑—É–ª—å—Ç–∞—Ç (—Ç CO2-—ç–∫–≤)").font = header_font
                ws_emissions.cell(row, 2).fill = header_fill
                ws_emissions.cell(row, 2).alignment = header_alignment
                ws_emissions.cell(row, 2).border = thin_border
                row += 1

                total_emissions = 0
                for category, data in emissions_data.items():
                    if isinstance(data, dict):
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        result_text = data.get('result', '')
                        if not result_text or result_text == "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞":
                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

                        result_value = extract_number(result_text)
                        if result_value == 0:
                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω—É–ª–µ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

                        # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        ws_emissions.cell(row, 1, category).border = thin_border

                        # –†–µ–∑—É–ª—å—Ç–∞—Ç
                        ws_emissions.cell(row, 2, result_value).border = thin_border
                        ws_emissions.cell(row, 2).number_format = '0.0000'

                        total_emissions += result_value
                        row += 1

                # –ò—Ç–æ–≥–æ –≤—ã–±—Ä–æ—Å–æ–≤
                if total_emissions > 0:
                    ws_emissions.cell(row, 1, "–ò–¢–û–ì–û –í–´–ë–†–û–°–û–í:").font = total_font
                    ws_emissions.cell(row, 1).fill = total_fill
                    ws_emissions.cell(row, 1).border = thin_border

                    ws_emissions.cell(row, 2, total_emissions).font = total_font
                    ws_emissions.cell(row, 2).fill = total_fill
                    ws_emissions.cell(row, 2).border = thin_border
                    ws_emissions.cell(row, 2).number_format = '0.0000'

            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏—è
            absorption_data = self._collect_absorption_data()
            if absorption_data:
                ws_absorption = wb.create_sheet("–ü–æ–≥–ª–æ—â–µ–Ω–∏–µ –ü–ì")
                row = 1

                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π - —Ç–æ–ª—å–∫–æ —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
                ws_absorption.cell(row, 1, "–¢–∏–ø —Ä–∞—Å—á–µ—Ç–∞").font = header_font
                ws_absorption.cell(row, 1).fill = header_fill
                ws_absorption.cell(row, 1).alignment = header_alignment
                ws_absorption.cell(row, 1).border = thin_border

                ws_absorption.cell(row, 2, "–†–µ–∑—É–ª—å—Ç–∞—Ç (—Ç CO2-—ç–∫–≤)").font = header_font
                ws_absorption.cell(row, 2).fill = header_fill
                ws_absorption.cell(row, 2).alignment = header_alignment
                ws_absorption.cell(row, 2).border = thin_border
                row += 1

                total_absorption = 0
                for calc_type, data in absorption_data.items():
                    if isinstance(data, dict):
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        result_text = data.get('result', '')
                        if not result_text or result_text == "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞":
                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

                        result_value = extract_number(result_text)
                        if result_value == 0:
                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω—É–ª–µ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

                        # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ä–∞—Å—á–µ—Ç–∞
                        ws_absorption.cell(row, 1, calc_type).border = thin_border

                        # –†–µ–∑—É–ª—å—Ç–∞—Ç
                        ws_absorption.cell(row, 2, result_value).border = thin_border
                        ws_absorption.cell(row, 2).number_format = '0.0000'

                        total_absorption += result_value
                        row += 1

                # –ò—Ç–æ–≥–æ –ø–æ–≥–ª–æ—â–µ–Ω–∏—è
                if total_absorption > 0:
                    ws_absorption.cell(row, 1, "–ò–¢–û–ì–û –ü–û–ì–õ–û–©–ï–ù–ò–Ø:").font = total_font
                    ws_absorption.cell(row, 1).fill = total_fill
                    ws_absorption.cell(row, 1).border = thin_border

                    ws_absorption.cell(row, 2, total_absorption).font = total_font
                    ws_absorption.cell(row, 2).fill = total_fill
                    ws_absorption.cell(row, 2).border = thin_border
                    ws_absorption.cell(row, 2).number_format = '0.0000'

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
            for ws in wb.worksheets:
                ws.column_dimensions['A'].width = 40
                ws.column_dimensions['B'].width = 25

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            wb.save(file_path)
            logging.info(f"Excel report saved to {file_path}")

        except ImportError:
            raise Exception("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑: pip install openpyxl")
        except Exception as e:
            logging.error(f"Error creating Excel report: {e}", exc_info=True)
            raise

    def _export_to_pdf(self, file_path):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ PDF (—Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫)."""
        # –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å –ø–æ–º–æ—â—å—é reportlab
        raise NotImplementedError("–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç Excel –∏–ª–∏ HTML.")

    def _export_to_html(self, file_path):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ HTML."""
        try:
            import re

            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            emissions_data = self._collect_emissions_data()
            absorption_data = self._collect_absorption_data()

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            def extract_number(text):
                if isinstance(text, (int, float)):
                    return float(text)
                if isinstance(text, str):
                    match = re.search(r'[-+]?\d*\.?\d+(?:[eE][-+]?\d+)?', text.replace(',', '.'))
                    if match:
                        try:
                            return float(match.group())
                        except:
                            pass
                return 0.0

            # –§–æ—Ä–º–∏—Ä—É–µ–º HTML
            html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—Ç—á–µ—Ç –ø–æ –≤—ã–±—Ä–æ—Å–∞–º –∏ –ø–æ–≥–ª–æ—â–µ–Ω–∏—é –ü–ì</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f5f5f5;
        }}
        .container {{
            max-width: 1400px;
            margin: 0 auto;
            background-color: white;
            padding: 30px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }}
        h1 {{
            color: #1F4E78;
            border-bottom: 3px solid #4472C4;
            padding-bottom: 10px;
        }}
        h2 {{
            color: #34495e;
            margin-top: 30px;
            background-color: #e8f4f8;
            padding: 10px;
            border-left: 5px solid #4472C4;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }}
        th {{
            background-color: #4472C4;
            color: white;
            padding: 12px;
            text-align: left;
            font-weight: bold;
        }}
        td {{
            padding: 10px;
            border: 1px solid #ddd;
            vertical-align: top;
        }}
        tr:nth-child(even) {{
            background-color: #f9f9f9;
        }}
        tr:hover {{
            background-color: #f0f8ff;
        }}
        .total {{
            font-weight: bold;
            background-color: #e8f4f8 !important;
            font-size: 1.1em;
        }}
        .info {{
            background-color: #e8f4f8;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
            border-left: 5px solid #4472C4;
        }}
        .fields {{
            font-size: 0.9em;
            color: #555;
            white-space: pre-wrap;
        }}
        .result {{
            font-weight: bold;
            color: #2c3e50;
            text-align: right;
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>–û–¢–ß–ï–¢ –ü–û –í–´–ë–†–û–°–ê–ú –ò –ü–û–ì–õ–û–©–ï–ù–ò–Æ –ü–ê–†–ù–ò–ö–û–í–´–• –ì–ê–ó–û–í</h1>

        <div class="info">
            <p><strong>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</p>
            <p><strong>–í–µ—Ä—Å–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã:</strong> 2.0</p>
            <p><strong>–ú–µ—Ç–æ–¥–∏–∫–∞:</strong> –ü—Ä–∏–∫–∞–∑ –ú–∏–Ω–ø—Ä–∏—Ä–æ–¥—ã –†–§ –æ—Ç 27.05.2022 N 371</p>
        </div>

        <h2>üìä –í—ã–±—Ä–æ—Å—ã –ü–ì</h2>
        <table>
            <thead>
                <tr>
                    <th style="width: 70%;">–¢–∏–ø —Ä–∞—Å—á–µ—Ç–∞</th>
                    <th style="width: 30%;">–†–µ–∑—É–ª—å—Ç–∞—Ç (—Ç CO2-—ç–∫–≤)</th>
                </tr>
            </thead>
            <tbody>
"""
            total_emissions = 0
            for category, data in emissions_data.items():
                if isinstance(data, dict):
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç
                    result_text = data.get('result', '')
                    if not result_text or result_text == "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞":
                        continue

                    result_value = extract_number(result_text)
                    if result_value == 0:
                        continue

                    html_content += f"""
                <tr>
                    <td>{category}</td>
                    <td class="result">{result_value:.4f}</td>
                </tr>
"""
                    total_emissions += result_value

            html_content += f"""
                <tr class="total">
                    <td>–ò–¢–û–ì–û –í–´–ë–†–û–°–û–í:</td>
                    <td class="result">{total_emissions:.4f}</td>
                </tr>
            </tbody>
        </table>

        <h2>üå≤ –ü–æ–≥–ª–æ—â–µ–Ω–∏–µ –ü–ì</h2>
        <table>
            <thead>
                <tr>
                    <th style="width: 70%;">–¢–∏–ø —Ä–∞—Å—á–µ—Ç–∞</th>
                    <th style="width: 30%;">–†–µ–∑—É–ª—å—Ç–∞—Ç (—Ç CO2-—ç–∫–≤)</th>
                </tr>
            </thead>
            <tbody>
"""
            total_absorption = 0
            for calc_type, data in absorption_data.items():
                if isinstance(data, dict):
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç
                    result_text = data.get('result', '')
                    if not result_text or result_text == "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞":
                        continue

                    result_value = extract_number(result_text)
                    if result_value == 0:
                        continue

                    html_content += f"""
                <tr>
                    <td>{calc_type}</td>
                    <td class="result">{result_value:.4f}</td>
                </tr>
"""
                    total_absorption += result_value

            html_content += f"""
                <tr class="total">
                    <td>–ò–¢–û–ì–û –ü–û–ì–õ–û–©–ï–ù–ò–Ø:</td>
                    <td class="result">{total_absorption:.4f}</td>
                </tr>
            </tbody>
        </table>

        <h2>‚öñÔ∏è –ë–∞–ª–∞–Ω—Å –ü–ì</h2>
        <div class="info">
            <p><strong>–û–±—â–∏–µ –≤—ã–±—Ä–æ—Å—ã:</strong> {total_emissions:.4f} —Ç CO2-—ç–∫–≤</p>
            <p><strong>–û–±—â–µ–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ:</strong> {total_absorption:.4f} —Ç CO2-—ç–∫–≤</p>
            <p><strong>–ß–∏—Å—Ç—ã–µ –≤—ã–±—Ä–æ—Å—ã:</strong> {total_emissions - total_absorption:.4f} —Ç CO2-—ç–∫–≤</p>
        </div>
    </div>
</body>
</html>
"""
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–∞–π–ª
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(html_content)

            logging.info(f"HTML report saved to {file_path}")

        except Exception as e:
            logging.error(f"Error creating HTML report: {e}", exc_info=True)
            raise

    def _calculate_total_emissions(self):
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã –∏–∑ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫.

        Returns:
            tuple: (total_emissions, emissions_by_category, successful_count)
        """
        total_emissions = 0.0
        emissions_by_category = []
        successful_count = 0

        for i in range(self.emissions_tabs.count()):
            tab = self.emissions_tabs.widget(i)
            tab_name = self.emissions_tabs.tabText(i)

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –≤–∫–ª–∞–¥–∫–∏
            if hasattr(tab, 'get_data'):
                data = tab.get_data()
                result_text = data.get('result', '')

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                emission_value = self._extract_number_from_result(result_text)

                if emission_value is not None and emission_value > 0:
                    total_emissions += emission_value
                    emissions_by_category.append({
                        'name': tab_name,
                        'value': emission_value
                    })
                    successful_count += 1
                    logging.debug(f"Emission from {tab_name}: {emission_value:.4f} —Ç CO2-—ç–∫–≤")

        logging.info(f"Total emissions calculated: {total_emissions:.4f} —Ç CO2-—ç–∫–≤ from {successful_count} categories")
        return total_emissions, emissions_by_category, successful_count

    def _calculate_total_absorption(self):
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω–æ–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫.

        Returns:
            tuple: (total_absorption, absorption_by_type, successful_count)
        """
        total_absorption = 0.0
        absorption_by_type = []
        successful_count = 0

        for i in range(self.absorption_tabs.count()):
            tab = self.absorption_tabs.widget(i)
            tab_name = self.absorption_tabs.tabText(i)

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∫–ª–∞–¥–∫—É "–°–≤–æ–¥–Ω—ã–π —Ä–∞—Å—á–µ—Ç"
            if "–°–≤–æ–¥–Ω—ã–π" in tab_name or "üìà" in tab_name:
                continue

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –≤–∫–ª–∞–¥–∫–∏
            if hasattr(tab, 'get_data'):
                data = tab.get_data()
                result_text = data.get('result', '')

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                absorption_value = self._extract_number_from_result(result_text)

                if absorption_value is not None and absorption_value > 0:
                    total_absorption += absorption_value
                    absorption_by_type.append({
                        'name': tab_name,
                        'value': absorption_value
                    })
                    successful_count += 1
                    logging.debug(f"Absorption from {tab_name}: {absorption_value:.4f} —Ç CO2-—ç–∫–≤")

        logging.info(f"Total absorption calculated: {total_absorption:.4f} —Ç CO2-—ç–∫–≤ from {successful_count} types")
        return total_absorption, absorption_by_type, successful_count

    def _extract_number_from_result(self, result_text):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.

        Args:
            result_text: –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–†–µ–∑—É–ª—å—Ç–∞—Ç: 1234.56 —Ç–æ–Ω–Ω CO2")

        Returns:
            float –∏–ª–∏ None: –ò–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        if not result_text or not isinstance(result_text, str):
            return None

        import re
        # –ò—â–µ–º —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π –≤ —Ç–µ–∫—Å—Ç–µ
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã: 1234.56, 1,234.56, 1234,56
        patterns = [
            r'(\d+(?:[.,]\d+)?)\s*(?:—Ç–æ–Ω–Ω|—Ç|—Ç CO2|—ÇCO2|–∫–≥|kg)',
            r'[–†—Ä]–µ–∑—É–ª—å—Ç–∞—Ç[:\s]+(\d+(?:[.,]\d+)?)',
            r'(\d+(?:[.,]\d+))'
        ]

        for pattern in patterns:
            match = re.search(pattern, result_text)
            if match:
                try:
                    number_str = match.group(1).replace(',', '.')
                    return float(number_str)
                except:
                    continue

        return None

    def _show_balance(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –≤—ã–±—Ä–æ—Å–æ–≤ –∏ –ø–æ–≥–ª–æ—â–µ–Ω–∏—è."""
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º–∞—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            total_emissions, emissions_by_category, em_count = self._calculate_total_emissions()
            total_absorption, absorption_by_type, ab_count = self._calculate_total_absorption()
            net_emissions = total_emissions - total_absorption

            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
            from PyQt6.QtWidgets import QDialog, QVBoxLayout, QHBoxLayout, QLabel, QTextEdit, QPushButton, QGroupBox
            from PyQt6.QtCore import Qt

            dialog = QDialog(self)
            dialog.setWindowTitle("‚öñÔ∏è –ë–∞–ª–∞–Ω—Å –ø–∞—Ä–Ω–∏–∫–æ–≤—ã—Ö –≥–∞–∑–æ–≤")
            dialog.setMinimumWidth(700)
            dialog.setMinimumHeight(600)

            layout = QVBoxLayout(dialog)

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title_label = QLabel("<h2>‚öñÔ∏è –ë–∞–ª–∞–Ω—Å –ø–∞—Ä–Ω–∏–∫–æ–≤—ã—Ö –≥–∞–∑–æ–≤ (–ü–ì)</h2>")
            title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            layout.addWidget(title_label)

            # –ì—Ä—É–ø–ø–∞: –°—É–º–º–∞—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            summary_group = QGroupBox("üìä –°–≤–æ–¥–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
            summary_layout = QVBoxLayout(summary_group)

            emissions_label = QLabel(f"<b>–û–±—â–∏–µ –≤—ã–±—Ä–æ—Å—ã:</b> <span style='color: #d32f2f; font-size: 18px;'>{total_emissions:.4f}</span> —Ç CO2-—ç–∫–≤<br>"
                                    f"<small>(–∏–∑ {em_count} –∫–∞—Ç–µ–≥–æ—Ä–∏–π)</small>")
            emissions_label.setTextFormat(Qt.TextFormat.RichText)
            summary_layout.addWidget(emissions_label)

            absorption_label = QLabel(f"<b>–û–±—â–µ–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ:</b> <span style='color: #388e3c; font-size: 18px;'>{total_absorption:.4f}</span> —Ç CO2-—ç–∫–≤<br>"
                                      f"<small>(–∏–∑ {ab_count} —Ç–∏–ø–æ–≤)</small>")
            absorption_label.setTextFormat(Qt.TextFormat.RichText)
            summary_layout.addWidget(absorption_label)

            # –õ–∏–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            line_label = QLabel("<hr>")
            summary_layout.addWidget(line_label)

            # –ß–∏—Å—Ç—ã–µ –≤—ã–±—Ä–æ—Å—ã
            net_color = "#d32f2f" if net_emissions > 0 else "#388e3c"
            net_text = "–ß–∏—Å—Ç—ã–µ –≤—ã–±—Ä–æ—Å—ã" if net_emissions > 0 else "–ß–∏—Å—Ç–æ–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ"
            net_label = QLabel(f"<b>{net_text}:</b> <span style='color: {net_color}; font-size: 20px; font-weight: bold;'>{abs(net_emissions):.4f}</span> —Ç CO2-—ç–∫–≤")
            net_label.setTextFormat(Qt.TextFormat.RichText)
            summary_layout.addWidget(net_label)

            # –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
            if total_emissions > 0:
                compensation_percent = (total_absorption / total_emissions) * 100
                compensation_label = QLabel(f"<small><i>–ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –≤—ã–±—Ä–æ—Å–æ–≤: {compensation_percent:.2f}%</i></small>")
                compensation_label.setTextFormat(Qt.TextFormat.RichText)
                summary_layout.addWidget(compensation_label)

            layout.addWidget(summary_group)

            # –ì—Ä—É–ø–ø–∞: –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            details_group = QGroupBox("üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è")
            details_layout = QVBoxLayout(details_group)

            details_text = QTextEdit()
            details_text.setReadOnly(True)
            details_content = ""

            if emissions_by_category:
                details_content += "<h3 style='color: #d32f2f;'>üî¥ –í—ã–±—Ä–æ—Å—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</h3><ul>"
                for item in sorted(emissions_by_category, key=lambda x: x['value'], reverse=True):
                    details_content += f"<li><b>{item['name']}:</b> {item['value']:.4f} —Ç CO2-—ç–∫–≤</li>"
                details_content += "</ul><br>"
            else:
                details_content += "<p><i>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–æ—Å–∞–º. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞—Å—á–µ—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –≤—ã–±—Ä–æ—Å–æ–≤.</i></p><br>"

            if absorption_by_type:
                details_content += "<h3 style='color: #388e3c;'>üü¢ –ü–æ–≥–ª–æ—â–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:</h3><ul>"
                for item in sorted(absorption_by_type, key=lambda x: x['value'], reverse=True):
                    details_content += f"<li><b>{item['name']}:</b> {item['value']:.4f} —Ç CO2-—ç–∫–≤</li>"
                details_content += "</ul>"
            else:
                details_content += "<p><i>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–≥–ª–æ—â–µ–Ω–∏—é. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞—Å—á–µ—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏—è.</i></p>"

            details_text.setHtml(details_content)
            details_layout.addWidget(details_text)

            layout.addWidget(details_group)

            # –ö–Ω–æ–ø–∫–∏
            button_layout = QHBoxLayout()

            export_btn = QPushButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")
            export_btn.clicked.connect(lambda: (dialog.accept(), self._export_report()))
            export_btn.setStyleSheet("QPushButton { padding: 8px; }")

            close_btn = QPushButton("‚úñ –ó–∞–∫—Ä—ã—Ç—å")
            close_btn.clicked.connect(dialog.accept)
            close_btn.setStyleSheet("QPushButton { padding: 8px; }")

            button_layout.addWidget(export_btn)
            button_layout.addWidget(close_btn)
            layout.addLayout(button_layout)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
            dialog.exec()

            logging.info("Balance dialog shown successfully")

        except Exception as e:
            logging.error(f"Error showing balance: {e}", exc_info=True)
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–∞–ª–∞–Ω—Å:\n{str(e)}"
            )

    def _show_comparison(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤."""
        QMessageBox.information(self, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    def _show_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
        QMessageBox.information(self, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    def _show_docs(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é."""
        QMessageBox.information(
            self,
            "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
            "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–∞—Ä–Ω–∏–∫–æ–≤—ã—Ö –≥–∞–∑–æ–≤ v2.0\n\n"
            "–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –º–µ—Ç–æ–¥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞:\n"
            "‚Ä¢ –í—ã–±—Ä–æ—Å–æ–≤ –ü–ì (25 –∫–∞—Ç–µ–≥–æ—Ä–∏–π)\n"
            "‚Ä¢ –ü–æ–≥–ª–æ—â–µ–Ω–∏—è –ü–ì (—Ñ–æ—Ä–º—É–ª—ã 1-100)\n\n"
            "–°–æ–≥–ª–∞—Å–Ω–æ –ü—Ä–∏–∫–∞–∑—É –ú–∏–Ω–ø—Ä–∏—Ä–æ–¥—ã –†–§ –æ—Ç 27.05.2022 N 371"
        )

    def _show_methodology(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—é —Ä–∞—Å—á–µ—Ç–æ–≤."""
        QMessageBox.information(
            self,
            "–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è",
            "–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤ –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞:\n\n"
            "1. –ü—Ä–∏–∫–∞–∑–µ –ú–∏–Ω–ø—Ä–∏—Ä–æ–¥—ã –†–§ –æ—Ç 27.05.2022 N 371\n"
            "2. –†—É–∫–æ–≤–æ–¥—è—â–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö –ú–ì–≠–ò–ö 2006 –≥.\n"
            "3. –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞—Ö –≤—ã–±—Ä–æ—Å–æ–≤\n\n"
            "–í—Å–µ —Ñ–æ—Ä–º—É–ª—ã –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç\n"
            "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –º–µ—Ç–æ–¥–∏–∫–µ –†–§"
        )

    def _show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ."""
        QMessageBox.about(
            self,
            "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
            "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–∞—Ä–Ω–∏–∫–æ–≤—ã—Ö –≥–∞–∑–æ–≤ v2.0\n\n"
            "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—ã–±—Ä–æ—Å–æ–≤ –∏ –ø–æ–≥–ª–æ—â–µ–Ω–∏—è\n"
            "–ø–∞—Ä–Ω–∏–∫–æ–≤—ã—Ö –≥–∞–∑–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –º–µ—Ç–æ–¥–∏–∫–µ\n"
            "–ú–∏–Ω–ø—Ä–∏—Ä–æ–¥—ã –†–æ—Å—Å–∏–∏\n\n"
            "¬© 2024 GHG Calculator Team"
        )