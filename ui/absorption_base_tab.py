# ui/absorption_base_tab.py
"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ —Ä–∞—Å—á–µ—Ç–æ–≤ –ø–æ–≥–ª–æ—â–µ–Ω–∏—è –ü–ì.
–£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â–∏–µ –º–µ—Ç–æ–¥—ã.
"""
from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QFormLayout, QLineEdit, QPushButton,
    QLabel, QGroupBox, QScrollArea, QMessageBox, QHBoxLayout,
)
from PyQt6.QtGui import QDoubleValidator
from PyQt6.QtCore import Qt, QLocale
import logging
from typing import Tuple, Optional

from ui.ui_utils import get_label_with_standard_units


class AbsorptionBaseTab(QWidget):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ –ø–æ–≥–ª–æ—â–µ–Ω–∏—è –ü–ì.

    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
    - –ï–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    - –ú–µ—Ç–æ–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–µ–π —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    - –ö–Ω–æ–ø–∫—É "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø–æ–ª—è"
    - –û–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
    """

    def __init__(self, calculator, parent=None):
        super().__init__(parent)
        self.calculator = calculator
        self.c_locale = QLocale(QLocale.Language.English, QLocale.Country.UnitedStates)
        self._input_fields = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        self.result_text = None  # –í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    def _create_main_layout(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π layout —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π."""
        main_layout = QVBoxLayout(self)
        main_layout.setAlignment(Qt.AlignmentFlag.AlignTop)

        # –û–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setStyleSheet("""
            QScrollArea {
                border: none;
                background-color: transparent;
            }
        """)

        widget = QWidget()
        layout = QVBoxLayout(widget)
        layout.setAlignment(Qt.AlignmentFlag.AlignTop)
        layout.setSpacing(15)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏

        scroll_area.setWidget(widget)
        main_layout.addWidget(scroll_area)

        return layout

    def _create_line_edit(
        self,
        default: str = "0.0",
        validator_params: Optional[Tuple[float, float, int]] = None,
        tooltip: str = "",
        placeholder: str = "",
    ) -> QLineEdit:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º.

        :param default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        :param validator_params: (min, max, decimals) –¥–ª—è QDoubleValidator
        :param tooltip: –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        :param placeholder: –¢–µ–∫—Å—Ç-–∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        :return: QLineEdit
        """
        line_edit = QLineEdit(default)

        if validator_params:
            validator = QDoubleValidator(*validator_params, self)
            validator.setLocale(self.c_locale)
            validator.setNotation(QDoubleValidator.Notation.StandardNotation)
            line_edit.setValidator(validator)

        if tooltip:
            line_edit.setToolTip(tooltip)

        if placeholder:
            line_edit.setPlaceholderText(placeholder)

        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
        line_edit.setStyleSheet("""
            QLineEdit {
                padding: 6px;
                border: 1px solid #ccc;
                border-radius: 4px;
                background-color: white;
                font-size: 10pt;
            }
            QLineEdit:focus {
                border: 2px solid #4CAF50;
            }
            QLineEdit:disabled {
                background-color: #f0f0f0;
                color: #888;
            }
        """)

        self._input_fields.append(line_edit)
        return line_edit

    def _get_float(self, line_edit: QLineEdit, field_name: str) -> float:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç float –∏–∑ QLineEdit —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.

        :param line_edit: –ü–æ–ª–µ –≤–≤–æ–¥–∞
        :param field_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
        :return: float –∑–Ω–∞—á–µ–Ω–∏–µ
        :raises ValueError: –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        """
        text = line_edit.text().replace(',', '.')
        if not text:
            raise ValueError(f"–ü–æ–ª–µ '{field_name}' –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")

        try:
            value = float(text)
            validator = line_edit.validator()
            if validator:
                state, _, _ = validator.validate(text, 0)
                if state != QDoubleValidator.State.Acceptable:
                    raise ValueError(
                        f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ '{field_name}'."
                    )
            return value
        except ValueError:
            raise ValueError(
                f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ '{text}' –≤ –ø–æ–ª–µ '{field_name}'."
            )

    def _create_group_box(self, title: str) -> Tuple[QGroupBox, QFormLayout]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π QGroupBox —Å FormLayout.

        :param title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã
        :return: (QGroupBox, QFormLayout)
        """
        group = QGroupBox(title)
        group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                font-size: 11pt;
                border: 2px solid #4CAF50;
                border-radius: 8px;
                margin-top: 12px;
                padding-top: 12px;
                background-color: #f9f9f9;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top left;
                padding: 4px 10px;
                background-color: #4CAF50;
                color: white;
                border-radius: 4px;
            }
        """)

        layout = QFormLayout(group)
        layout.setSpacing(10)
        layout.setContentsMargins(15, 20, 15, 15)
        layout.setLabelAlignment(Qt.AlignmentFlag.AlignRight)

        return group, layout

    def _create_calculate_button(self, text: str) -> QPushButton:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É —Ä–∞—Å—á–µ—Ç–∞.

        :param text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        :return: QPushButton
        """
        button = QPushButton(text)
        button.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
                font-size: 10pt;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:pressed {
                background-color: #3d8b40;
            }
            QPushButton:disabled {
                background-color: #cccccc;
                color: #888888;
            }
        """)
        button.setCursor(Qt.CursorShape.PointingHandCursor)
        return button

    def _create_clear_button(self) -> QPushButton:
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –ø–æ–ª–µ–π."""
        button = QPushButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø–æ–ª—è")
        button.setStyleSheet("""
            QPushButton {
                background-color: #ff9800;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
                font-size: 10pt;
            }
            QPushButton:hover {
                background-color: #fb8c00;
            }
            QPushButton:pressed {
                background-color: #e65100;
            }
        """)
        button.setCursor(Qt.CursorShape.PointingHandCursor)
        button.clicked.connect(self._clear_all_fields)
        return button

    def _clear_all_fields(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞."""
        for field in self._input_fields:
            if isinstance(field, QLineEdit):
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–æ–±—ã—á–Ω–æ "0.0")
                field.setText("0.0")

        # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if self.result_text:
            self.result_text.clear()

        logging.info(f"{self.__class__.__name__}: All fields cleared")

    def _create_result_area(self) -> QLabel:
        """
        –°–æ–∑–¥–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

        :return: QLabel –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        result_label = QLabel("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞")
        result_label.setWordWrap(True)
        result_label.setStyleSheet("""
            QLabel {
                padding: 15px;
                background-color: #e8f5e9;
                border: 2px solid #4CAF50;
                border-radius: 8px;
                font-size: 11pt;
                color: #2e7d32;
            }
        """)
        result_label.setAlignment(Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignTop)
        result_label.setMinimumHeight(80)

        self.result_text = result_label
        return result_label

    def _display_result(self, formula_name: str, result: float, unit: str = "—Ç"):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞.

        :param formula_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã
        :param result: –ß–∏—Å–ª–æ–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        :param unit: –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        """
        if self.result_text:
            text = f"<b>{formula_name}</b><br>"
            text += f"<span style='font-size: 14pt; color: #1b5e20;'>"
            text += f"<b>{result:.4f}</b> {unit}"
            text += "</span>"
            self.result_text.setText(text)
            logging.info(f"{formula_name}: {result:.4f} {unit}")

    def _handle_error(self, e: Exception, formula_ref: str = ""):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—à–∏–±–∫–∏ —Ä–∞—Å—á–µ—Ç–∞.

        :param e: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
        :param formula_ref: –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É–ª—É
        """
        prefix = f"{self.__class__.__name__}"
        if formula_ref:
            prefix += f" ({formula_ref})"

        if isinstance(e, ValueError):
            QMessageBox.warning(
                self,
                f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞",
                f"{formula_ref}: {str(e)}"
            )
            if self.result_text:
                self.result_text.setText(
                    f"<span style='color: #d32f2f;'><b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞:</b> {str(e)}</span>"
                )
            logging.warning(f"{prefix}: Input error - {e}")
        else:
            QMessageBox.critical(
                self,
                f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞",
                f"{formula_ref}: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            )
            if self.result_text:
                self.result_text.setText(
                    f"<span style='color: #d32f2f;'><b>–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞:</b> {str(e)}</span>"
                )
            logging.error(f"{prefix}: Calculation error - {e}", exc_info=True)

    def _add_label_with_units(
        self,
        layout: QFormLayout,
        base_label: str,
        unit_key: str,
        widget: QWidget
    ):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è.

        :param layout: QFormLayout
        :param base_label: –ë–∞–∑–æ–≤–∞—è –º–µ—Ç–∫–∞
        :param unit_key: –ö–ª—é—á –µ–¥–∏–Ω–∏—Ü—ã –∏–∑ STANDARD_UNITS
        :param widget: –í–∏–¥–∂–µ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞
        """
        label = get_label_with_standard_units(base_label, unit_key)
        layout.addRow(label, widget)

    def _create_buttons_layout(self, *buttons: QPushButton) -> QHBoxLayout:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π layout –¥–ª—è –∫–Ω–æ–ø–æ–∫.

        :param buttons: –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        :return: QHBoxLayout
        """
        layout = QHBoxLayout()
        layout.setSpacing(10)

        for button in buttons:
            layout.addWidget(button)

        layout.addStretch()
        return layout

    def get_data(self):
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –ø–æ–ª–µ–π –≤–∫–ª–∞–¥–∫–∏.

        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–∫–ª–∞–¥–∫–∏
        """
        data = {}
        for i, field in enumerate(self._input_fields):
            if isinstance(field, QLineEdit):
                field_name = getattr(field, 'objectName', lambda: f'field_{i}')()
                if not field_name or field_name.startswith('qt_'):
                    field_name = f'field_{i}'
                data[field_name] = field.text()

        result = None
        if self.result_text and self.result_text.text():
            result = self.result_text.text()

        return {'fields': data, 'result': result}

    def set_data(self, data):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Å–µ –ø–æ–ª—è –≤–∫–ª–∞–¥–∫–∏.

        Args:
            data: dict —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        """
        if not isinstance(data, dict):
            return

        fields_data = data.get('fields', {})
        for i, field in enumerate(self._input_fields):
            if isinstance(field, QLineEdit):
                field_name = getattr(field, 'objectName', lambda: f'field_{i}')()
                if not field_name or field_name.startswith('qt_'):
                    field_name = f'field_{i}'
                if field_name in fields_data:
                    field.setText(str(fields_data[field_name]))

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
        result = data.get('result')
        if result and self.result_text:
            self.result_text.setText(str(result))

    def clear_fields(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ (–∞–ª–∏–∞—Å –¥–ª—è _clear_all_fields)."""
        self._clear_all_fields()
